#!/usr/bin/env python
#
# Copyright (c) Pivotal Inc 2015. All Rights Reserved.
#
import os
import sys
import subprocess
from hawqpylib.HAWQ_HELP import *
from hawqpylib.hawqlib import check_return_code

global hawq_home, source_hawq_env


def print_version():
    print 'HAWQ version $Revision$'
    sys.exit(0)


def local_ssh(cmd):
    '''Execute shell command on local machine.'''
    result = subprocess.Popen(cmd, shell=True).wait()
    return result

def main():
    cluster_type_list = ('cluster', 'segment', 'master', 'standby', 'allsegments')
    cluster_init_list = ('cluster', 'segment', 'master', 'standby')
    hawq_home = os.getenv('GPHOME')
    result = 0

    if not hawq_home:
        print "HAWQ home directory not defined, please check GPHOME settings."
        sys.exit(1)

    source_hawq_env = "source %s/greenplum_path.sh" % hawq_home

    if len(sys.argv) > 2:
        hawq_command = sys.argv[1]
        second_arg = sys.argv[2]
        sub_args = " ".join(sys.argv[2:])
    elif len(sys.argv) > 1:
        hawq_command = sys.argv[1]
        second_arg = ''
        sub_args = ''
    else:
        hawq_command = ''
        second_arg = ''
        sub_args = ''

    if hawq_command == "start":
        if second_arg not in cluster_type_list:
            print START_HELP
            sys.exit(1)
        cmd = "%s; hawq_ctl %s %s" % (source_hawq_env, hawq_command, sub_args)
        result = local_ssh(cmd)
    elif hawq_command == "stop":
        if second_arg not in cluster_type_list:
            print STOP_HELP
            sys.exit(1)
        cmd = "%s; hawq_ctl %s %s" % (source_hawq_env, hawq_command, sub_args)
        result = local_ssh(cmd)
    elif hawq_command == "init":
        if second_arg not in cluster_init_list:
            print INIT_HELP
            sys.exit(1)
        cmd = "%s; hawq_ctl %s %s" % (source_hawq_env, hawq_command, sub_args)
        result = local_ssh(cmd)
    elif hawq_command == "restart":
        if second_arg not in cluster_type_list:
            print START_HELP
            sys.exit(1)
        cmd = "%s; hawq_ctl stop %s" % (source_hawq_env, sub_args)
        result = local_ssh(cmd)
        cmd = "%s; hawq_ctl start %s" % (source_hawq_env, sub_args)
        result = local_ssh(cmd)
    elif hawq_command == "activate":
        if second_arg in ['', 'help', '--help']:
            print ACTIVE_HELP
            sys.exit(1)
        cmd = "%s; hawq_ctl %s %s" % (source_hawq_env, hawq_command, sub_args)
        result = local_ssh(cmd)
    elif hawq_command == "config":
        if second_arg in ['', 'help', '--help']:
            print CONFIG_HELP
            sys.exit(1)
        cmd = "%s; hawqconfig %s" % (source_hawq_env, sub_args)
        result = local_ssh(cmd)
    elif hawq_command == "extract":
        cmd = "%s; hawqextract %s" % (source_hawq_env, sub_args)
        result = local_ssh(cmd)
    elif hawq_command == "check":
        cmd = "%s; gpcheck %s" % (source_hawq_env, sub_args)
        result = local_ssh(cmd)
    elif hawq_command == "load":
        cmd = "%s; gpload %s" % (source_hawq_env, sub_args)
        result = local_ssh(cmd)
    elif hawq_command == "filespace":
        cmd = "%s; hawqfilespace %s" % (source_hawq_env, sub_args)
        result = local_ssh(cmd)
    elif hawq_command == "state":
        cmd = "%s; hawqstate %s" % (source_hawq_env, sub_args)
        result = local_ssh(cmd)
    elif hawq_command == "ssh":
        cmd = "%s; gpssh %s" % (source_hawq_env, sub_args)
        result = local_ssh(cmd)
    elif hawq_command == "ssh-exkeys":
        cmd = "%s; gpssh-exkeys %s" % (source_hawq_env, sub_args)
        result = local_ssh(cmd)
    elif hawq_command == "scp":
        cmd = "%s; gpscp %s" % (source_hawq_env, sub_args)
        result = local_ssh(cmd)
    elif hawq_command == "version" or hawq_command == "--version":
        print_version()
    else:
        print COMMON_HELP
        sys.exit(1)
    check_return_code(result)

if __name__ == '__main__':
    main()
