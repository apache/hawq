#!/usr/bin/env python
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
# 
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

import os, sys, re
from optparse import Option, OptionParser
from hawqpylib.hawqlib import HawqXMLParser, parse_hosts_file, remove_property_xml
from gppylib.db import dbconn
from pygresql.pg import DatabaseError

def parseargs():
    parser = OptionParser(usage="HAWQ config options.")
    parser.add_option('-c', '--change', type='string',
                      help="Change HAWQ Property.")
    parser.add_option('-r', '--remove', type='string',
                      help="Remove HAWQ Property.")
    parser.add_option('-s', '--show', type='string',
                      help="Change HAWQ Property name.")
    parser.add_option('-l', '--list', action='store_true',
                      help="List all HAWQ Properties.")
    parser.add_option('--skipvalidation', action='store_true')
    parser.add_option('-q', '--quiet', action='store_true', default=False)
    parser.add_option("-v", "--value",
                      dest="property_value",
                      help="Set HAWQ Property value.")
    parser.add_option("-d",
                      dest="hawq_home",
                      help="HAWQ home directory.")
    (options, args) = parser.parse_args()
    return (options, args)


def check_property(hawq_site, property_name, property_value):
    if property_name in hawq_site.hawq_dict:
        print "GUC %s already exist in hawq-site.xml" % property_name
        print "Update it with value: %s" % property_value
        item_exist = True
    else:
        print "GUC %s does not exist in hawq-site.xml." % property_name
        print "Try to add it with value: %s" % property_value
        item_exist = False
    return item_exist


def list_properties(hawq_site):
    property_name = 'None'
    property_value = 'None'
    try:
        dburl = dbconn.DbURL(port=hawq_site.hawq_dict['hawq_master_address_port'], dbname='template1')
        conn = dbconn.connect(dburl, True)
        query = "select name, setting from pg_settings;"
        rows = dbconn.execSQL(conn, query)
        conn.close()
    except DatabaseError, ex:
        print "Failed to connect to database, this script can only be run when the database is up."
        sys.exit(1)
    for row in rows:
        property_name = row[0]
        property_value = row[1] 
        print "GUC\t\t: %s" % property_name
        print "Value\t\t: %s\n" % property_value

    return property_name, property_value


def show_guc(hawq_site, property_name):
    property_value = 'None'
    try:
        dburl = dbconn.DbURL(port=hawq_site.hawq_dict['hawq_master_address_port'], dbname='template1')
        conn = dbconn.connect(dburl, True)
        query = "show %s;" % property_name
        rows = dbconn.execSQL(conn, query)
        if rows:
            for row in rows:
                property_value = row[0]
        else:
            print "No such GUC exist."
            sys.exit(1)
        conn.close()
    except DatabaseError, ex:
        if re.search("unrecognized configuration parameter", ex.__str__()):
            print "Failed to retrieve GUC information, guc %s does not exist" % property_name
        elif re.search("could not connect to server", ex.__str__()):
            print "Failed to retrieve GUC information, the database is not accesible"
        else:
            print "Failed to retrieve GUC information: %s" % ex.__str__()
        sys.exit(1)

    print "GUC\t\t: %s" % property_name
    print "Value\t\t: %s" % property_value
    return None


def show_property(hawq_site, property_name):
    if property_name in hawq_site.hawq_dict:
        print "GUC\t\t: %s" % property_name
        print "Value\t\t: %s" % hawq_site.hawq_dict[property_name]
    else:
        print "Failed to retrieve GUC information, guc '%s' does not exist in hawq-site.xml." % property_name
    return None


def update_line(xmlfile, property_name, property_value):
    with open(xmlfile) as f:
        f_tmp = open(xmlfile + '.backup', 'w')
        while 1:
            line = f.readline()

            if not line:
                break

            m = re.match('\s*<name>%s' % property_name, line)
            if m:
                while 1:
                    next_line = f.readline()
                    m2 = re.match('\s*<value>', next_line)
                    if m2:
                        f_tmp.write(line)
                        p = re.compile('\s*<value>(.*)</value>')
                        p_value = p.match(next_line).group(1)
                        next_line_new = re.sub(p_value, property_value, next_line)
                        f_tmp.write(next_line_new)
                        break
            else:
                f_tmp.write(line)
        f_tmp.close()
    return None


def add_property(xmlfile, property_name, property_value):
    with open(xmlfile) as f:
        f_tmp = open(xmlfile + '.backup', 'w')
        while 1:
            line = f.readline()

            if not line:
                break

            m = re.match('\s*</configuration>', line)
            if m:
                f_tmp.write('    <property>\n')
                f_tmp.write('        <name>%s</name>\n' % property_name)
                f_tmp.write('       <value>%s</value>\n' % property_value)
                f_tmp.write('    </property>\n')
                f_tmp.write('</configuration>\n')
            else:
                f_tmp.write(line)
        f_tmp.close()
    return None


def update_hawq_site(org_config_file, hawq_site, property_name, property_value):
    os.system('cp %s %s' % (org_config_file, org_config_file + '.org'))
    result = check_property(hawq_site, property_name, property_value)
    if result:
        update_line(org_config_file, property_name, property_value)
        os.system('mv %s %s' % (org_config_file + '.backup', org_config_file))
    else:
        add_property(org_config_file, property_name, property_value)
        os.system('mv %s %s' % (org_config_file + '.backup', org_config_file))


def sync_hawq_site(GPHOME, host_list):
    for node in host_list:
        try:
            # Print "Sync hawq-site.xml to %s." % node
            os.system("scp %s/etc/hawq-site.xml %s:%s/etc/hawq-site.xml > /dev/null 2>&1" % (GPHOME, node, GPHOME))
        except:
            print ""
            sys.exit("sync to node %s failed." % node)
    return None

options, args = parseargs()

if options.hawq_home is None:
    GPHOME = os.getenv('GPHOME')
else:
    GPHOME = options.hawq_home
hawq_site = HawqXMLParser(GPHOME)
hawq_site.get_all_values()
org_config_file = "%s/etc/hawq-site.xml" % GPHOME
segment_list = parse_hosts_file(GPHOME)
master_host = hawq_site.hawq_dict['hawq_master_address_host']
host_list = segment_list + [master_host]
if 'hawq_standby_address_host' in hawq_site.hawq_dict:
    standby_host = hawq_site.hawq_dict['hawq_standby_address_host']
    if standby_host not in ('None', 'none', ''):
        host_list = host_list + [standby_host]
else:
    print "No standby host configured, skip it."

# Update hawq-site.xml
if options.change:
    update_hawq_site(org_config_file, hawq_site, options.change, options.property_value)
    sync_hawq_site(GPHOME, host_list)
    if not options.quiet:
        latest_hawq_site = HawqXMLParser(GPHOME)
        latest_hawq_site.get_all_values()
        show_property(latest_hawq_site, options.change)
elif options.show:
    latest_hawq_site = HawqXMLParser(GPHOME)
    latest_hawq_site.get_all_values()
    show_guc(latest_hawq_site, options.show)
elif options.list:
    latest_hawq_site = HawqXMLParser(GPHOME)
    latest_hawq_site.get_all_values()
    list_properties(latest_hawq_site)
elif options.remove:
    except_list = ['hawq_master_address_host', 'hawq_master_directory', 'hawq_segment_directory']
    if options.remove in except_list:
        print "Remove %s is not allowed." % options.remove
        sys.exit(1)
    remove_property_xml(options.remove, org_config_file)
    sync_hawq_site(GPHOME, host_list)
else:
    print "Please input correct options."
    sys.exit(1)
