COMMAND NAME: hawq register

Register parquet files generated by other system into the corrsponding table in HAWQ

*****************************************************
SYNOPSIS
*****************************************************

hawq register [-h hostname] [-p port] [-U username] <databasename> <tablename> <hdfspath>

hawq register help
hawq register -?

hawq register --version

*****************************************************
DESCRIPTION
*****************************************************

"hawq register" is a utility to register file(s) on HDFS into
the table in HAWQ. It moves the file in the path(if path
refers to a file) or files under the path(if path refers to a
directory) into the table directory corresponding to the table,
and then update the table meta data to include the files.

To use "hawq register", HAWQ must have been started.

Currently "hawq register" only supports parquet tables generated by HIVE and HAWQ.
User have to make sure that the meta data of the parquet file(s)
and the table are consistent.
The table to be registered into should not be hash distributed, which
is created by using "distributed by" statement when creating that table.
The file(s) to be registered and the table in HAWQ must be in the
same HDFS cluster.

*****************************************************
Arguments
*****************************************************

<databasename>

Name of the database to be operated on.

<tablename>

Name of the table to be registered into.

<hdfspath>

The path of the file or the directory containing the files
that will be registered.

*****************************************************
OPTIONS
*****************************************************

-? (help)

Displays the online help.

--version

Displays the version of this utility.

*****************************************************
CONNECTION OPTIONS
*****************************************************

-h hostname

  Specifies the host name of the machine on which the HAWQ master
  database server is running. If not specified, reads from the
  environment variable $PGHOST which defaults to localhost.

-p port

  Specifies the TCP port on which the HAWQ master database server
  is listening for connections. If not specified, reads from the
  environment variable $PGPORT which defaults to 5432.

-U username

  The database role name to connect as. If not specified, reads
  from the environment variable $PGUSER which defaults to the current
  system user name.

*****************************************************
EXAMPLES
*****************************************************

Run "hawq register" to register a parquet file in HDFS with path
'hdfs://localhost:8020/temp/hive.paq' generated by HIVE into table
'parquet_table' in HAWQ, which is in the database named 'postgres'.

Assume the location of the database is 'hdfs://localhost:8020/hawq_default',
tablespace id is '16385', database id is '16387', table filenode id is '77160',
last file under the filenode numbered '7'.

$ hawq register postgres parquet_table hdfs://localhost:8020/temp/hive.paq

This will move the file 'hdfs://localhost:8020/temp/hive.paq' into the corresponding
new place 'hdfs://localhost:8020/hawq_default/16385/16387/77160/8' in HDFS, then
update the meta data of the table 'parquet_table' in HAWQ which is in the
table 'pg_aoseg.pg_paqseg_77160'.

*****************************************************
DATA TYPES
*****************************************************

Currently "hawq register" only supports to register parquet file(s) generated by HIVE
or HAWQ into HAWQ. To finish that, make sure to follow the mapping rules listed below.

The data types used in HIVE and HAWQ are not the same, so there is a
mapping between them, concluded as follow:

Data types in HIVE              Data types in HAWQ
boolean                         bool
tinyint                         int2
smallint                        int2 / smallint
int                             int4 / int
bigint                          int8 / bigint
date                            date
float                           float4
double                          float8 / double precision
string                          varchar
binary                          bytea
char                            char
varchar                         varchar

Limitations: Currently the conversion of the following date types in HIVE is not supported:
timestamp, decimal, array, struct, map, union
