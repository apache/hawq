--
-- Catalog Upgrade Script (from 4.0 to 4.1)
--
-- All catalog changes should be placed here.
-- Most operations can be declared as DDL, such as ALTER TABLE, CREATE TABLE
-- Creating catalog objects must specific its oid. For example,
--   Create function f1(int) ... with (oid = <newoid>)
--   Create aggregate agg1(int) (..., oid = <newoid>)
--
-- Some operatiosn can't be declared as DDL, such as populating a new catalog column,
-- or replacing the on-dist representation of views. These must be done DML.
-- For example:
--   update pg_catalog.pg_aggregate set dummy = 123;
--   select catDML('update pg_catalog.pg_aggregate set dummy = 123') from gp_dist_random('gp_version_at_initdb');
--
-- The first DML will populate the mater catalog and the second DML will update the catalog
-- in all the segments.


-- Persistent Table
alter table @gpupgradeschemaname@.gp_persistent_relation_node rename reserved to relation_bufpool_kind;

create function @gpupgradeschemaname@.gp_persistent_build_all(
     @gpupgradeschemaname@.bool)
returns @gpupgradeschemaname@.int4
language internal AS 'gp_persistent_build_all' volatile
with (oid = 7179);
select @gpupgradeschemaname@.addProcPIN(7179);
comment on function @gpupgradeschemaname@.gp_persistent_build_all(
     @gpupgradeschemaname@.bool)
is 'populate the persistent tables and gp_relation_node for the whole database instance';

create function @gpupgradeschemaname@.gp_persistent_reset_all()
returns @gpupgradeschemaname@.int4
language internal AS 'gp_persistent_reset_all' volatile
with (oid = 7180);
select @gpupgradeschemaname@.addProcPIN(7180);
comment on function @gpupgradeschemaname@.gp_persistent_reset_all()
is 'Remove the persistent tables and gp_relation_node for the whole database instance';

create function @gpupgradeschemaname@.gp_persistent_repair_delete(
    @gpupgradeschemaname@.int4,
    @gpupgradeschemaname@.tid)
returns @gpupgradeschemaname@.int4
language internal AS 'gp_persistent_repair_delete' volatile
with (oid = 7181);
select @gpupgradeschemaname@.addProcPIN(7181);
comment on function @gpupgradeschemaname@.gp_persistent_repair_delete(
    @gpupgradeschemaname@.int4,
    @gpupgradeschemaname@.tid)
is 'Remove an entry specified by TID from a persistent table for the current database instance';

create function @gpupgradeschemaname@.gp_persistent_set_relation_bufpool_kind_all()
returns @gpupgradeschemaname@.int4
language internal AS 'gp_persistent_set_relation_bufpool_kind_all' volatile
with (oid = 7182);
select @gpupgradeschemaname@.addProcPIN(7182);
comment on function @gpupgradeschemaname@.gp_persistent_set_relation_bufpool_kind_all()
is 'Populate the gp_persistent_relation_node table''s relation_bufpool_kind column for the whole database instance for upgrade from 4.0 to 4.1';

select gp_persistent_set_relation_bufpool_kind_all();
select gp_persistent_set_relation_bufpool_kind_all() from gp_dist_random('gp_version_at_initdb');

update @gpupgradeschemaname@.pg_class set relhaspkey = true where oid = 5094;
select catDML('update @gpupgradeschemaname@.pg_class set relhaspkey = true where oid = 5094') from gp_dist_random('gp_version_at_initdb');
--
-- Ordered Aggregates
--
alter table @gpupgradeschemaname@.pg_aggregate add column aggordered boolean;
update @gpupgradeschemaname@.pg_aggregate set aggordered = 'f';
select catDML('update @gpupgradeschemaname@.pg_aggregate set aggordered = ''f''') from gp_dist_random('gp_version_at_initdb');

---
--- PL/Java template
---
insert into @gpupgradeschemaname@.pg_pltemplate 
  select 'pljava', false, 'pljava_call_handler', null, '$libdir/pljava', null
  where (select count(*) from @gpupgradeschemaname@.pg_pltemplate where tmplname='pljava')=0;
select catDML('insert into @gpupgradeschemaname@.pg_pltemplate 
  select ''pljava'', false, ''pljava_call_handler'', null, ''$libdir/pljava'', null
  where (select count(*) from @gpupgradeschemaname@.pg_pltemplate where tmplname=''pljava'')=0') from gp_dist_random('gp_version_at_initdb');

--------------------------------
-- Re-create gp_toolkit
--   1. drop all the objects in gp_toolkit
--   2. remove the pin on gp_toolkit
--   3. drop and recreate the schema gp_toolkit
--------------------------------
DROP VIEW if exists @gpupgradetoolkitschema@.__gp_is_append_only cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.__gp_fullname cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.__gp_user_namespaces cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.__gp_user_tables cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.__gp_user_data_tables cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.__gp_user_data_tables_readable cascade;
DROP EXTERNAL WEB TABLE if exists @gpupgradetoolkitschema@.__gp_localid cascade;
DROP EXTERNAL WEB TABLE if exists @gpupgradetoolkitschema@.__gp_masterid cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.__gp_number_of_segments cascade;
DROP EXTERNAL WEB TABLE if exists @gpupgradetoolkitschema@.__gp_log_segment_ext cascade;
DROP EXTERNAL WEB TABLE if exists @gpupgradetoolkitschema@.__gp_log_master_ext cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_log_system  cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_log_database  cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_log_master_concise cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_log_command_timings cascade;
DROP TYPE if exists @gpupgradetoolkitschema@.gp_param_setting_t cascade;
DROP FUNCTION if exists @gpupgradetoolkitschema@.__gp_param_local_setting(varchar) cascade;
DROP FUNCTION if exists @gpupgradetoolkitschema@.gp_param_setting(varchar) cascade;
DROP FUNCTION if exists @gpupgradetoolkitschema@.gp_param_settings()  cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_param_settings_seg_value_diffs cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_pgdatabase_invalid  cascade;
DROP TYPE if exists @gpupgradetoolkitschema@.gp_skew_details_t cascade;
DROP FUNCTION if exists @gpupgradetoolkitschema@.gp_skew_details(oid) cascade;
DROP TYPE if exists @gpupgradetoolkitschema@.gp_skew_analysis_t cascade;
DROP FUNCTION if exists @gpupgradetoolkitschema@.gp_skew_coefficient(targetoid oid, OUT skcoid oid, OUT skccoeff numeric) cascade;
DROP FUNCTION if exists @gpupgradetoolkitschema@.__gp_skew_coefficients() cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_skew_coefficients cascade;
DROP FUNCTION if exists @gpupgradetoolkitschema@.gp_skew_idle_fraction(targetoid oid, OUT sifoid oid, OUT siffraction numeric) cascade;
DROP FUNCTION if exists @gpupgradetoolkitschema@.__gp_skew_idle_fractions() cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_skew_idle_fractions cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_stats_missing cascade;
DROP EXTERNAL WEB TABLE if exists @gpupgradetoolkitschema@.gp_disk_free cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_bloat_expected_pages cascade;
DROP FUNCTION if exists @gpupgradetoolkitschema@.gp_bloat_diag(btdrelpages int, btdexppages int, aotable bool, OUT bltidx int, OUT bltdiag text) cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_bloat_diag cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_resq_activity cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_resq_activity_by_queue cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_resq_priority_backend cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_resq_priority_statement cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_resq_role cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_locks_on_resqueue cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_locks_on_relation cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_roles_assigned cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_size_of_index cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_size_of_table_disk cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_size_of_table_uncompressed cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_table_indexes  cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_size_of_all_table_indexes cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_size_of_table_and_indexes_disk cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_size_of_table_and_indexes_licensing cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_size_of_partition_and_indexes_disk cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_size_of_schema_disk cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_size_of_database cascade;
DROP FUNCTION if exists @gpupgradetoolkitschema@.__gp__seg_locks(segid int) cascade;
DROP VIEW if exists @gpupgradetoolkitschema@.gp_locks cascade;

-- Verify that we successfully dropped all objects from the toolkit schema
select 1/0 from pg_catalog.pg_class, pg_catalog.pg_namespace n where relnamespace = n.oid and n.nspname = '@gpupgradetoolkitschema@';
select 1/0 from pg_catalog.pg_proc, pg_catalog.pg_namespace n where pronamespace = n.oid and n.nspname = '@gpupgradetoolkitschema@';
select 1/0 from pg_catalog.pg_type, pg_catalog.pg_namespace n where typnamespace = n.oid and n.nspname = '@gpupgradetoolkitschema@';
select 1/0 from pg_catalog.pg_constraint, pg_catalog.pg_namespace n where connamespace = n.oid and n.nspname = '@gupgradetoolkitschema@';
select 1/0 from pg_catalog.pg_operator, pg_catalog.pg_namespace n where oprnamespace = n.oid and n.nspname = '@gpupgradetoolkitschema@';
select 1/0 from pg_catalog.pg_opclass, pg_catalog.pg_namespace n where opcnamespace = n.oid and n.nspname = '@gpupgradetoolkitschema@';
select 1/0 from pg_catalog.pg_conversion, pg_catalog.pg_namespace n where connamespace = n.oid and n.nspname = '@gpupgradetoolkitschema@';

delete from @gpupgradeschemaname@.pg_depend where refobjid=8001;
select catDML('delete from @gpupgradeschemaname@.pg_depend where refobjid=8001') from gp_dist_random('gp_version_at_initdb');

drop schema if exists @gpupgradetoolkitschema@;
create schema @gpupgradetoolkitschema@;


-- MPP-11461, MPP-11127: fix tablespace
CREATE OR REPLACE VIEW @gpupgradeschemaname@.pg_partitions AS
  select 
      schemaname, 
      tablename, 
      partitionschemaname, 
      partitiontablename, 
      partitionname, 
      parentpartitiontablename, 
      parentpartitionname, 
      partitiontype, 
      partitionlevel, 
      -- Only the non-default parts of range partitions have 
      -- a non-null partition rank.  For these the rank is
      -- from (1, 2, ...) in keeping with the use of RANK(n)
      -- to identify the parts of a range partition in the 
      -- ALTER statement.
      case
          when partitiontype <> 'range'::text then null::bigint
          when partitionnodefault > 0 then partitionrank
          when partitionrank = 0 then null::bigint
          else partitionrank
          end as partitionrank, 
      partitionposition, 
      partitionlistvalues, 
      partitionrangestart, 
      case
          when partitiontype = 'range'::text then partitionstartinclusive
          else null::boolean
          end as partitionstartinclusive, partitionrangeend, 
      case
          when partitiontype = 'range'::text then partitionendinclusive
          else null::boolean
          end as partitionendinclusive, 
      partitioneveryclause, 
      parisdefault as partitionisdefault, 
      partitionboundary,
      parentspace as parenttablespace,
      partspace as partitiontablespace
  from 
      ( 
          select 
              n.nspname as schemaname, 
              cl.relname as tablename, 
              n2.nspname as partitionschemaname, 
              cl2.relname as partitiontablename, 
              pr1.parname as partitionname, 
              cl3.relname as parentpartitiontablename, 
              pr2.parname as parentpartitionname, 
              case
                  when pp.parkind = 'h'::"char" then 'hash'::text
                  when pp.parkind = 'r'::"char" then 'range'::text
                  when pp.parkind = 'l'::"char" then 'list'::text
                  else null::text
                  end as partitiontype, 
              pp.parlevel as partitionlevel, 
              pr1.parruleord as partitionposition, 
              case
                  when pp.parkind != 'r'::"char" or pr1.parisdefault then null::bigint
                  else
                      rank() over(
                      partition by pp.oid, cl.relname, pp.parlevel, cl3.relname
                      order by pr1.parisdefault, pr1.parruleord) 
                  end as partitionrank, 
              pg_get_expr(pr1.parlistvalues, pr1.parchildrelid) as partitionlistvalues, 
              pg_get_expr(pr1.parrangestart, pr1.parchildrelid) as partitionrangestart, 
              pr1.parrangestartincl as partitionstartinclusive, 
              pg_get_expr(pr1.parrangeend, pr1.parchildrelid) as partitionrangeend, 
              pr1.parrangeendincl as partitionendinclusive, 
              pg_get_expr(pr1.parrangeevery, pr1.parchildrelid) as partitioneveryclause, 
              min(pr1.parruleord) over(
                  partition by pp.oid, cl.relname, pp.parlevel, cl3.relname
                  order by pr1.parruleord) as partitionnodefault, 
              pr1.parisdefault, 
              pg_get_partition_rule_def(pr1.oid, true) as partitionboundary,
              coalesce(sp.spcname, dfltspcname) as parentspace,
              coalesce(sp3.spcname, dfltspcname) as partspace
          from 
              pg_namespace n, 
              pg_namespace n2, 
              pg_class cl
                  left join
              pg_tablespace sp on cl.reltablespace = sp.oid, 
              pg_class cl2
                  left join
              pg_tablespace sp3 on cl2.reltablespace = sp3.oid,
              pg_partition pp, 
              pg_partition_rule pr1
                  left join 
              pg_partition_rule pr2 on pr1.parparentrule = pr2.oid
                  left join 
              pg_class cl3 on pr2.parchildrelid = cl3.oid,
              (select s.spcname
               from pg_database, pg_tablespace s
               where datname = current_database()
                 and dattablespace = s.oid) d(dfltspcname)
      where 
          pp.paristemplate = false and 
          pp.parrelid = cl.oid and 
          pr1.paroid = pp.oid and 
          cl2.oid = pr1.parchildrelid and 
          cl.relnamespace = n.oid and 
          cl2.relnamespace = n2.oid) p1;

-- tstats & pvalues
create function @gpupgradeschemaname@.float8_mregr_tstats(float8[]) 
    returns float8[] 
    language internal AS 'float8_mregr_tstats' strict immutable 
    with (oid = 3263);
select @gpupgradeschemaname@.addProcPIN(3263);

create aggregate @gpupgradeschemaname@.mregr_tstats(float8, float8[]) (
    stype     = float8[],
    initcond  = '{0}',
    sfunc     = float8_mregr_accum, 
    prefunc   = float8_mregr_combine,
    finalfunc = float8_mregr_tstats,
    oid       = 3264
);
select @gpupgradeschemaname@.addProcPIN(3264);

create function @gpupgradeschemaname@.float8_mregr_pvalues(float8[]) 
    returns float8[] 
    language internal AS 'float8_mregr_pvalues' strict immutable 
    with (oid = 3265);
select @gpupgradeschemaname@.addProcPIN(3265);
    
create aggregate @gpupgradeschemaname@.mregr_pvalues(float8, float8[]) (
    stype     = float8[],
    initcond  = '{0}',
    sfunc     = float8_mregr_accum, 
    prefunc   = float8_mregr_combine,
    finalfunc = float8_mregr_pvalues,
    oid       = 3266
);
select @gpupgradeschemaname@.addProcPIN(3266);

-- naive bayes probability values
create function @gpupgradeschemaname@.nb_classify_probabilities(nb_classification) 
    returns float8[]
    language internal AS 'nb_classify_probabilities' strict immutable
    with (oid = 3267);
select @gpupgradeschemaname@.addProcPIN(3267);
create aggregate @gpupgradeschemaname@.nb_probabilities(text[], bigint, bigint[], bigint[]) (
    stype     = nb_classification,
    sfunc     = nb_classify_accum,
    prefunc   = nb_classify_combine,
    finalfunc = nb_classify_probabilities,
    oid       = 3268
);
select @gpupgradeschemaname@.addProcPIN(3268);


--
-- Memory quota related changes
--

-- add catalog function

create function @gpupgradeschemaname@.pg_resqueue_status_kv() 
	returns setof record 
	language internal AS 'pg_resqueue_status_kv' strict volatile
	with (oid = 6069);
select @gpupgradeschemaname@.addProcPIN(6069);
comment on  function @gpupgradeschemaname@.pg_resqueue_status_kv()
is 'Return resource queue information';

-- add new resource type in pg_resourcetype. this table is maintained 
create external web table @gpupgradeschemaname@.pg_resourcetype_insert(a text)
  execute 'echo "6459,memory_limit,6,false,true,true,-1,-1">$GP_SEG_DATADIR/gp_tmp;
           PGOPTIONS=''-c gp_session_role=utility'' psql -p $GP_MASTER_PORT --command "copy @gpupgradeschemaname@.pg_resourcetype from ''$GP_SEG_DATADIR/gp_tmp'' with oids csv" template1 $GP_USER;
           rm -rf $GP_SEG_DATADIR/gp_tmp'
  on master format 'text';
select (select * from  @gpupgradeschemaname@.pg_resourcetype_insert)
  where 6459 not in (select oid from @gpupgradeschemaname@.pg_resourcetype);
drop external web table @gpupgradeschemaname@.pg_resourcetype_insert;


-- for every existing queue, add default memory_limit of -1. This table is not maintained on the segments, so we don't do this on the segments.

insert into @gpupgradeschemaname@.pg_resqueuecapability
	select distinct resqueueid, 6, '-1'
	from @gpupgradeschemaname@.pg_resqueuecapability
	where resqueueid not in (select resqueueid from @gpupgradeschemaname@.pg_resqueuecapability where restypid = 6);
	
--
-- pg_stat_activity
--

create function @gpupgradeschemaname@.pg_stat_get_activity(
    pid integer, OUT datid oid, OUT procpid integer, OUT usesysid oid, OUT application_name text,
    OUT current_query text, OUT waiting boolean, OUT xact_start timestamp with time zone, 
    OUT query_start timestamp with time zone, OUT backend_start timestamp with time zone, 
    OUT client_addr inet, OUT client_port integer, OUT sess_id integer )
	returns setof record 
	language internal AS 'pg_stat_get_activity' stable
	with (oid = 6071);
select @gpupgradeschemaname@.addProcPIN(6071);
comment on function @gpupgradeschemaname@.pg_stat_get_activity(
    pid integer, OUT datid oid, OUT procpid integer, OUT usesysid oid, OUT application_name text,
    OUT current_query text, OUT waiting boolean, OUT xact_start timestamp with time zone, 
    OUT query_start timestamp with time zone, OUT backend_start timestamp with time zone, 
    OUT client_addr inet, OUT client_port integer, OUT sess_id integer )
is 'statistics: information about currently active backends';


CREATE OR REPLACE VIEW @gpupgradeschemaname@.pg_stat_activity AS 
    SELECT 
            S.datid AS datid,
            D.datname AS datname,
            S.procpid,
            S.sess_id,
            S.usesysid,
            U.rolname AS usename,
            S.current_query,
            S.waiting,
            S.query_start,
            S.backend_start,
            S.client_addr,
            S.client_port,
            S.application_name,
            S.xact_start
    FROM pg_catalog.pg_database D, pg_catalog.pg_stat_get_activity(NULL) AS S, pg_catalog.pg_authid U
    WHERE S.datid = D.oid AND 
            S.usesysid = U.oid;

-- array_agg
create function @gpupgradeschemaname@.array_agg_transfn(
        @gpupgradeschemaname@.internal, 
        @gpupgradeschemaname@.anyelement) 
    returns @gpupgradeschemaname@.internal
    language internal AS 'array_agg_transfn' immutable
    with (oid = 2908);
select @gpupgradeschemaname@.addProcPIN(2908);
comment on function @gpupgradeschemaname@.array_agg_transfn(
        @gpupgradeschemaname@.internal, 
        @gpupgradeschemaname@.anyelement)
is 'array_agg transition function';
create function @gpupgradeschemaname@.array_agg_finalfn(
        @gpupgradeschemaname@.internal) 
    returns @gpupgradeschemaname@.anyarray
    language internal AS 'array_agg_finalfn' immutable
    with (oid = 2909);
select @gpupgradeschemaname@.addProcPIN(2909);
comment on function @gpupgradeschemaname@.array_agg_finalfn(
        @gpupgradeschemaname@.internal)
is 'array_agg final function';
create ordered aggregate @gpupgradeschemaname@.array_agg(
        @gpupgradeschemaname@.anyelement) 
    (
        stype     = @gpupgradeschemaname@.internal,
        sfunc     = @gpupgradeschemaname@.array_agg_transfn,
        finalfunc = @gpupgradeschemaname@.array_agg_finalfn,
        oid       = 2910
    );
select @gpupgradeschemaname@.addProcPIN(2910);
comment on aggregate @gpupgradeschemaname@.array_agg(
        @gpupgradeschemaname@.anyelement) 
is 'concatenate aggregate input into an array';


-- string_agg
create function @gpupgradeschemaname@.string_agg_transfn(
        @gpupgradeschemaname@.internal, 
        @gpupgradeschemaname@.text)
    returns @gpupgradeschemaname@.internal
    language internal AS 'string_agg_transfn' immutable
    with (oid = 3534);
select @gpupgradeschemaname@.addProcPIN(3534);
comment on function @gpupgradeschemaname@.string_agg_transfn(
        @gpupgradeschemaname@.internal, 
        @gpupgradeschemaname@.text)
is 'string_agg(text) transition function';
create function @gpupgradeschemaname@.string_agg_delim_transfn(
        @gpupgradeschemaname@.internal, 
        @gpupgradeschemaname@.text, 
        @gpupgradeschemaname@.text)
    returns @gpupgradeschemaname@.internal
    language internal AS 'string_agg_delim_transfn' immutable
    with (oid = 3535);
select @gpupgradeschemaname@.addProcPIN(3535);
comment on function @gpupgradeschemaname@.string_agg_delim_transfn(
        @gpupgradeschemaname@.internal, 
        @gpupgradeschemaname@.text, 
        @gpupgradeschemaname@.text)
is 'string_agg(text, text) transition function';
create function @gpupgradeschemaname@.string_agg_finalfn(
        @gpupgradeschemaname@.internal)
    returns @gpupgradeschemaname@.text
    language internal AS 'string_agg_finalfn' immutable
    with (oid = 3536);
select @gpupgradeschemaname@.addProcPIN(3536);
comment on function @gpupgradeschemaname@.string_agg_finalfn(
        @gpupgradeschemaname@.internal)
is 'string_agg final function';
create ordered aggregate @gpupgradeschemaname@.string_agg(
        @gpupgradeschemaname@.text) 
    (
        stype     = @gpupgradeschemaname@.internal,
        sfunc     = @gpupgradeschemaname@.string_agg_transfn,
        finalfunc = @gpupgradeschemaname@.string_agg_finalfn,
        oid       = 3537
    );
select @gpupgradeschemaname@.addProcPIN(3537);
comment on aggregate @gpupgradeschemaname@.string_agg(
        @gpupgradeschemaname@.text)
is 'concatenate aggregate input into an string';

create ordered aggregate @gpupgradeschemaname@.string_agg(
        @gpupgradeschemaname@.text, 
        @gpupgradeschemaname@.text) 
    (
        stype     = @gpupgradeschemaname@.internal,
        sfunc     = @gpupgradeschemaname@.string_agg_delim_transfn,
        finalfunc = @gpupgradeschemaname@.string_agg_finalfn,
        oid       = 3538
    );
select @gpupgradeschemaname@.addProcPIN(3538);
comment on aggregate @gpupgradeschemaname@.string_agg(
        @gpupgradeschemaname@.text, 
        @gpupgradeschemaname@.text)
is 'concatenate aggregate input into an string with delimiter';


-- pg_locks

CREATE OR REPLACE VIEW @gpupgradeschemaname@.pg_locks AS
 SELECT l.locktype, l.database, l.relation, l.page, l.tuple, l.transactionid, 
        l.classid, l.objid, l.objsubid, l.transaction, l.pid, l.mode, l.granted, 
        l.mppsessionid, l.mppiswriter, l.gp_segment_id
   FROM pg_lock_status() l(locktype text, database oid, relation oid, page integer, tuple smallint, transactionid xid, 
   					classid oid, objid oid, objsubid smallint, transaction xid, pid integer, mode text, granted boolean, 
   					mppsessionid integer, mppiswriter boolean, gp_segment_id integer);


-- 
-- Sync pg_resqueue between master and segment
-- 1. clear pg_resqueue 
-- 2. create an external table which
--    i.   remove the tmp file $GP_SEG_DATADIR/gp_tmp
--    ii.  writes pg_resqueue rows to $GP_SEG_DATADIR/gp_tmp
--    iii. COPY gp_tmp to pg_resqueue
--    iv.  remove the tmp file
-- 3. for every rows in pg_resqueue, insert the row into the external table at every segment
--

create writable external web table @gpupgradeschemaname@.pg_resqueue_delete (s text)
  execute 'PGOPTIONS=''-c gp_session_role=utility'' psql -p $GP_SEG_PORT --command "delete from @gpupgradeschemaname@.pg_resqueue" template1 $GP_USER'
  format 'csv';
select catDML('insert into @gpupgradeschemaname@.pg_resqueue_delete values(1)') from gp_dist_random('gp_version_at_initdb');
drop external web table @gpupgradeschemaname@.pg_resqueue_delete;

create writable external web table @gpupgradeschemaname@.pg_resqueue_rebuilt (
  rsqoid oid, rsqname name, cnt real, cost real, oc text, icost real)
  execute 'rm -f $GP_SEG_DATADIR/gp_tmp;
           tee -a $GP_SEG_DATADIR/gp_tmp;
           PGOPTIONS=''-c gp_session_role=utility'' psql -p $GP_SEG_PORT --command "copy @gpupgradeschemaname@.pg_resqueue from ''$GP_SEG_DATADIR/gp_tmp'' with oids csv" template1 $GP_USER;
           rm -f $GP_SEG_DATADIR/gp_tmp'
  format 'csv';

create or replace function @gpupgradeschemaname@.insert_gp_tmp(
  rsqoid oid, rsqname name, cnt real, cost real, oc text, icost real
) returns int as $$
begin
  insert into @gpupgradeschemaname@.pg_resqueue_rebuilt values(rsqoid, rsqname, cnt, cost, oc, icost);
  return 1;
end;
$$ language 'plpgsql';

create or replace function @gpupgradeschemaname@.distributed_insert_gp_tmp(
  rsqoid oid, rsqname name, cnt real, cost real, oc text, icost real
) returns int as $$
begin
  perform @gpupgradeschemaname@.insert_gp_tmp(rsqoid, rsqname, cnt, cost, oc, icost)
    from gp_dist_random('gp_version_at_initdb');
  return 1;
end;
$$ language 'plpgsql';

select @gpupgradeschemaname@.distributed_insert_gp_tmp(
    oid,rsqname,rsqcountlimit,rsqcostlimit,
    case when rsqovercommit then 'true' else 'false' end,
    rsqignorecostlimit)
from @gpupgradeschemaname@.pg_resqueue;

drop external web table @gpupgradeschemaname@.pg_resqueue_rebuilt;
drop function @gpupgradeschemaname@.insert_gp_tmp(oid, name, real, real, text, real);
drop function @gpupgradeschemaname@.distributed_insert_gp_tmp(oid, name, real, real, text, real);


-- 
-- Sync pg_resqueuecapability between master and segment
-- 1. clear pg_resqueuecapability 
-- 2. create an external table which
--    i.   remove the tmp file $GP_SEG_DATADIR/gp_tmp
--    ii.  writes pg_resqueue rows to $GP_SEG_DATADIR/gp_tmp
--    iii. COPY gp_tmp to pg_resqueuecapability
--    iv.  remove the tmp file
-- 3. for every rows in pg_resqueuecapability, insert the row into the external table at every segment
--

create writable external web table @gpupgradeschemaname@.pg_resqueuecapability_delete (s text)
  execute 'PGOPTIONS=''-c gp_session_role=utility'' psql -p $GP_SEG_PORT --command "delete from @gpupgradeschemaname@.pg_resqueuecapability" template1 $GP_USER'
  format 'csv';
select catDML('insert into @gpupgradeschemaname@.pg_resqueuecapability_delete values(1)') from gp_dist_random('gp_version_at_initdb');
drop external web table @gpupgradeschemaname@.pg_resqueuecapability_delete;

create writable external web table @gpupgradeschemaname@.pg_resqueuecapability_rebuilt (
  rsqoid oid, resqueueid oid, restypid smallint, ressetting text)
  execute 'rm -f $GP_SEG_DATADIR/gp_tmp;
           tee -a $GP_SEG_DATADIR/gp_tmp;
           PGOPTIONS=''-c gp_session_role=utility'' psql -p $GP_SEG_PORT --command "copy @gpupgradeschemaname@.pg_resqueuecapability from ''$GP_SEG_DATADIR/gp_tmp'' with oids csv" template1 $GP_USER;
           rm -f $GP_SEG_DATADIR/gp_tmp'
  format 'csv';

create or replace function @gpupgradeschemaname@.insert_gp_tmp(
  rsqoid oid, resqueueid oid, restypid smallint, ressetting text)
returns int as $$
begin
  insert into @gpupgradeschemaname@.pg_resqueuecapability_rebuilt values(rsqoid, resqueueid, restypid, ressetting);
  return 1;
end;
$$ language 'plpgsql';

create or replace function @gpupgradeschemaname@.distributed_insert_gp_tmp(
  rsqoid oid, resqueueid oid, restypid smallint, ressetting text
) returns int as $$
begin
  perform @gpupgradeschemaname@.insert_gp_tmp(rsqoid, resqueueid, restypid, ressetting)
    from gp_dist_random('gp_version_at_initdb');
  return 1;
end;
$$ language 'plpgsql';

select @gpupgradeschemaname@.distributed_insert_gp_tmp(
    oid,resqueueid, restypid, ressetting)
from @gpupgradeschemaname@.pg_resqueuecapability;

drop external web table @gpupgradeschemaname@.pg_resqueuecapability_rebuilt;
drop function @gpupgradeschemaname@.insert_gp_tmp(rsqoid oid, resqueueid oid, restypid smallint, ressetting text);
drop function @gpupgradeschemaname@.distributed_insert_gp_tmp(rsqoid oid, resqueueid oid, restypid smallint, ressetting text);


-- 
-- Sync pg_resourcetype between master and segment
-- 1. clear pg_resourcetype 
-- 2. create an external table which
--    i.   remove the tmp file $GP_SEG_DATADIR/gp_tmp
--    ii.  writes pg_resqueue rows to $GP_SEG_DATADIR/gp_tmp
--    iii. COPY gp_tmp to pg_resourcetype
--    iv.  remove the tmp file
-- 3. for every rows in pg_resourcetype, insert the row into the external table at every segment
--

create writable external web table @gpupgradeschemaname@.pg_resourcetype_delete (s text)
  execute 'PGOPTIONS=''-c gp_session_role=utility'' psql -p $GP_SEG_PORT --command "delete from @gpupgradeschemaname@.pg_resourcetype" template1 $GP_USER'
  format 'csv';
select catDML('insert into @gpupgradeschemaname@.pg_resourcetype_delete values(1)') from gp_dist_random('gp_version_at_initdb');
drop external web table @gpupgradeschemaname@.pg_resourcetype_delete;

create writable external web table @gpupgradeschemaname@.pg_resourcetype_rebuilt (
  rsqoid oid, resname name, restypid smallint, resrequired boolean, reshasdefault boolean,
  reshasdisable boolean, resdefaultsetting text, resdisabledsetting text 
)
  execute 'rm -f $GP_SEG_DATADIR/gp_tmp;
           tee -a $GP_SEG_DATADIR/gp_tmp;
           PGOPTIONS=''-c gp_session_role=utility'' psql -p $GP_SEG_PORT --command "copy @gpupgradeschemaname@.pg_resourcetype from ''$GP_SEG_DATADIR/gp_tmp'' with oids csv" template1 $GP_USER;
           rm -f $GP_SEG_DATADIR/gp_tmp'
  format 'csv';

create or replace function @gpupgradeschemaname@.insert_gp_tmp (
  rsqoid oid, resname name, restypid smallint, resrequired boolean, reshasdefault boolean,
  reshasdisable boolean, resdefaultsetting text, resdisabledsetting text 
)
returns int as $$
begin
  insert into @gpupgradeschemaname@.pg_resourcetype_rebuilt values(rsqoid, resname, restypid, resrequired, reshasdefault,
  reshasdisable, resdefaultsetting, resdisabledsetting);
  return 1;
end;
$$ language 'plpgsql';

create or replace function @gpupgradeschemaname@.distributed_insert_gp_tmp(
  rsqoid oid, resname name, restypid smallint, resrequired boolean, reshasdefault boolean,
  reshasdisable boolean, resdefaultsetting text, resdisabledsetting text 
) returns int as $$
begin
  perform @gpupgradeschemaname@.insert_gp_tmp(rsqoid, resname, restypid, resrequired, reshasdefault,
  reshasdisable, resdefaultsetting, resdisabledsetting)
    from gp_dist_random('gp_version_at_initdb');
  return 1;
end;
$$ language 'plpgsql';

select @gpupgradeschemaname@.distributed_insert_gp_tmp(
    oid,resname, restypid, resrequired, reshasdefault,
  reshasdisable, resdefaultsetting, resdisabledsetting)
from @gpupgradeschemaname@.pg_resourcetype;

drop external web table @gpupgradeschemaname@.pg_resourcetype_rebuilt;
drop function @gpupgradeschemaname@.insert_gp_tmp(rsqoid oid, resname name, restypid smallint, resrequired boolean, reshasdefault boolean,
  reshasdisable boolean, resdefaultsetting text, resdisabledsetting text);
drop function @gpupgradeschemaname@.distributed_insert_gp_tmp(rsqoid oid, resname name, restypid smallint, resrequired boolean, reshasdefault boolean,
  reshasdisable boolean, resdefaultsetting text, resdisabledsetting text);

--------------------------------
-- HDFS Privilege
--   1. add hdfs read/write privl columns to pg_authid
--   2. set default privl of hdfs read/write to false
--   3. add new columsn to pg_roles
--------------------------------
alter table @gpupgradeschemaname@.pg_authid add column rolcreaterexthdfs bool;
alter table @gpupgradeschemaname@.pg_authid add column rolcreatewexthdfs bool;
update @gpupgradeschemaname@.pg_authid set rolcreaterexthdfs = false, rolcreatewexthdfs = false;
select catDML('update @gpupgradeschemaname@.pg_authid set rolcreaterexthdfs = false, rolcreatewexthdfs = false') from gp_dist_random('gp_version_at_initdb');

-- sync pg_authid.rolsequeue between master and seg
select catDML('select catDML(''update @gpupgradeschemaname@.pg_authid set rolresqueue ='||rolresqueue||'
                               where oid = '||oid||''') from gp_dist_random(''gp_id'')')
from pg_authid;

CREATE OR REPLACE VIEW @gpupgradeschemaname@.pg_roles AS 
 SELECT pg_authid.rolname, pg_authid.rolsuper, pg_authid.rolinherit,
  pg_authid.rolcreaterole, pg_authid.rolcreatedb, pg_authid.rolcatupdate,
  pg_authid.rolcanlogin, pg_authid.rolconnlimit, '********'::text AS rolpassword,
  pg_authid.rolvaliduntil, pg_authid.rolconfig, pg_authid.rolresqueue, pg_authid.oid, 
  pg_authid.rolcreaterextgpfd, pg_authid.rolcreaterexthttp, pg_authid.rolcreatewextgpfd, 
  pg_authid.rolcreaterexthdfs, pg_authid.rolcreatewexthdfs
   FROM pg_authid;


-- Catalog Upgrade DDL complete
