--
-- Catalog Upgrade Script (from 4.1 to 4.2)
--
-- All catalog changes should be placed here.
-- Most operations can be declared as DDL, such as ALTER TABLE, CREATE TABLE
-- Creating catalog objects must specific its oid. For example,
--   Create function f1(int) ... with (oid = <newoid>)
--   Create aggregate agg1(int) (..., oid = <newoid>)
--
-- Some operations can't be declared as DDL, such as populating a new catalog column,
-- or replacing the on-disk representation of views. These must be done as DML.
-- For example:
--   update @gpupgradeschemaname@.pg_aggregate set dummy = 123;
--   select catDML('update pg_catalog.pg_aggregate set dummy = 123') from gp_dist_random('gp_version_at_initdb');
--
-- The first DML will populate the master catalog and the second DML will
-- update the catalog in all the segments.
set default_tablespace = '';

--
-- New Tables in 4.2
--
CREATE TABLE @gpupgradeschemaname@.pg_type_encoding
(
  typid     oid not null, 
  typoptions   text[]
)
with (relid=3220, oids=false, reltype_oid=3221, toast_oid=3222, toast_index=3223, toast_reltype=3224, CamelCase=TypeEncoding);
create unique index pg_type_encoding_typid_index on @gpupgradeschemaname@.pg_type_encoding(typid) with (indexid=3207);
grant select on @gpupgradeschemaname@.pg_type_encoding to public;
select @gpupgradeschemaname@.removeDefaultPrivilege('pg_type_encoding');

CREATE TABLE @gpupgradeschemaname@.pg_extprotocol
(
   ptcname        name not null,
   ptcreadfn      Oid not null,
   ptcwritefn     Oid not null,
   ptcvalidatorfn Oid not null, 
   ptcowner       Oid not null,
   ptctrusted	  bool not null,
   ptcacl         aclitem[]   
)
with (shared=false, oids=true, relid=7175, reltype_oid=7176);
create unique index pg_extprotocol_oid_index on @gpupgradeschemaname@.pg_extprotocol(oid) with (indexid=7156);
create unique index pg_extprotocol_ptcname_index on @gpupgradeschemaname@.pg_extprotocol(ptcname) with (indexid=7177);
grant select on @gpupgradeschemaname@.pg_extprotocol to public;
select @gpupgradeschemaname@.removeDefaultPrivilege('pg_extprotocol');

CREATE TABLE @gpupgradeschemaname@.pg_attribute_encoding
(
   attrelid     oid not null, 
   attnum		smallint not null, 
   attoptions   text[]
)
 with (relid=3231, oids=false, reltype_oid=3232, toast_oid=3233, toast_index=3234, toast_reltype=3235, CamelCase=AttributeEncoding);
create index pg_attribute_encoding_attrelid_index on @gpupgradeschemaname@.pg_attribute_encoding(attrelid) with (indexid=3236);
create unique index pg_attribute_encoding_attrelid_attnum_index on @gpupgradeschemaname@.pg_attribute_encoding(attrelid, attnum) with (indexid=3237);
grant select on @gpupgradeschemaname@.pg_attribute_encoding to public;
select @gpupgradeschemaname@.removeDefaultPrivilege('pg_attribute_encoding');

CREATE TABLE @gpupgradeschemaname@.gp_verification_history
(
   vertoken             name not null       ,    -- token of the verification request, 63 characters or less
   vertype              smallint not null   ,    -- 0=FULL (ie. all files and directories), 1=FILE, 2=DIRECTORY
   vercontent           smallint not null   ,    -- -1= all primary mirror pairs, >=0 specific primary/mirror pair
   verstarttime         timestamp with time zone not null,  --time the request is started
   verstate             smallint not null   ,     -- 0=Started, 1=Suspended, 2=Aborted, 3=Failed, 4=Succeeded
   verdone              boolean not null    ,     --0 if started or suspeneded, 1 if aborted or failed or successful completion
   verendtime           timestamp with time zone not null,  --time the request is completely done processing, only valid id verdone is true, latest end time for this token on any primary/mirror pair
   vermismatch          boolean not null         --were mismatches found on any primary/mirror pair for this token
)
with (camelcase=GpVerificationHistory, shared=true, oids=false, relid=6429, reltype_oid=6430)
tablespace pg_global;
create unique index gp_verification_history_vertoken_index on @gpupgradeschemaname@.gp_verification_history(vertoken) with (indexid=6431);
grant select on @gpupgradeschemaname@.gp_verification_history to public;
select @gpupgradeschemaname@.removeDefaultPrivilege('gp_verification_history');

CREATE TABLE @gpupgradeschemaname@.pg_auth_time_constraint
(
   authid oid not null, -- foreign key to pg_authid.oid,
   start_day smallint not null, -- [0,6] denoting start of interval
   start_time time not null, -- optional time denoting start of interval
   end_day smallint not null, -- [0,6] denoting end of interval
   end_time time not null -- optional time denoting end of interval
)
with (CamelCase=AuthTimeConstraint, shared=true, oids=false, relid=2914, reltype_oid=2915)
tablespace pg_global;
grant select on @gpupgradeschemaname@.pg_auth_time_constraint to public;
select @gpupgradeschemaname@.removeDefaultPrivilege('pg_auth_time_constraint');

CREATE TABLE @gpupgradeschemaname@.pg_proc_callback
(
   profnoid     regproc not null,   -- oid of the main function
   procallback  regproc not null,   -- oid of the callback function
   promethod    "char" not null     -- role the callback function is performing
)
with (relid=3124, reltype_oid=3125, oids=false, CamelCase=ProcCallback);
create unique index pg_proc_callback_profnoid_promethod_index on @gpupgradeschemaname@.pg_proc_callback(profnoid, promethod) with (indexid=3126);
grant select on @gpupgradeschemaname@.pg_proc_callback to public;
select @gpupgradeschemaname@.removeDefaultPrivilege('pg_proc_callback');

CREATE TABLE @gpupgradeschemaname@.pg_compression
   (
   compname				name not null, 
   compconstructor		regproc not null,
   compdestructor		regproc not null,
   compcompressor		regproc not null,
   compdecompressor		regproc not null,
   compvalidator		regproc not null,
   compowner			oid not null
   )
with (shared=false, oids=true, relid=3056, reltype_oid=3057, CamelCase=Compression);
grant select on @gpupgradeschemaname@.pg_compression to public;
select @gpupgradeschemaname@.removeDefaultPrivilege('pg_compression');

create unique index pg_compression_oid_index on @gpupgradeschemaname@.pg_compression(oid) with (indexid=3058);
create unique index pg_compression_compname_index on @gpupgradeschemaname@.pg_compression(compname) with (indexid=3059);

CREATE TABLE @gpupgradeschemaname@.pg_partition_encoding
   (
   parencoid     oid not null, 
   parencattnum	int2 not null,
   parencattoptions   text[]
   )
   with (relid=9903, reltype_oid=9904, toast_oid=9905, toast_index=9906, toast_reltype=9907, CamelCase=PartitionEncoding, oid=false);

grant select on @gpupgradeschemaname@.pg_partition_encoding to public;
select @gpupgradeschemaname@.removeDefaultPrivilege('pg_partition_encoding');

create unique index pg_partition_encoding_parencoid_parencattnum_index on @gpupgradeschemaname@.pg_partition_encoding(parencoid, parencattnum) with (indexid=9908, CamelCase=PartitionEncodingParencoidAttnum);
create index  pg_partition_encoding_parencoid_index on @gpupgradeschemaname@.pg_partition_encoding(parencoid) with (indexid=9909, CamelCase=PartitionEncodingParendoid);

--
--  End of New Tables
--
CREATE TRIGGER pg_sync_pg_auth_time_constraint
  AFTER INSERT OR UPDATE OR DELETE ON @gpupgradeschemaname@.pg_auth_time_constraint
  FOR EACH STATEMENT EXECUTE PROCEDURE flatfile_update_trigger();
select @gpupgradeschemaname@.addProcPIN(2620, oid)
  from pg_trigger
  where tgname = 'pg_sync_pg_auth_time_constraint' and tgrelid=2914;
delete from pg_depend where classid = 2620 and objid = (select oid from pg_trigger where tgname = 'pg_sync_pg_auth_time_constraint' and tgrelid=2914);
select @gpupgradeschemaname@.catDML(
  'delete from pg_depend where classid = 2620 and objid = (select oid from pg_trigger where tgname = ''pg_sync_pg_auth_time_constraint'' and tgrelid=2914)')
from gp_dist_random('gp_version_at_initdb');

CREATE OR REPLACE VIEW @gpupgradeschemaname@.pg_max_external_files AS
    SELECT   address::name as hostname, count(*) as maxfiles
    FROM     gp_segment_configuration
    WHERE    content >= 0 
    AND      role='p'
    GROUP BY address;

    
--
-- gphdfs protocol/formatter upgrade
--   1. create the formatter/protocol functions
--   2. create the protocols
--   3. Grant the protocol to those who has already been granted in the old way
--
CREATE OR REPLACE FUNCTION @gpupgradeschemaname@.gphdfs_export(record) RETURNS bytea 
AS '$libdir/gphdfs.so', 'gphdfsformatter_export'
LANGUAGE C STABLE;

CREATE OR REPLACE FUNCTION @gpupgradeschemaname@.gphdfs_import() RETURNS record
AS '$libdir/gphdfs.so', 'gphdfsformatter_import'
LANGUAGE C STABLE;

CREATE OR REPLACE FUNCTION @gpupgradeschemaname@.gphdfs_read() RETURNS integer
AS '$libdir/gphdfs.so', 'gphdfsprotocol_import'
LANGUAGE C STABLE;

CREATE OR REPLACE FUNCTION @gpupgradeschemaname@.gphdfs_write() RETURNS integer
AS '$libdir/gphdfs.so', 'gphdfsprotocol_export'
LANGUAGE C STABLE;

CREATE OR REPLACE FUNCTION @gpupgradeschemaname@.gphdfs_validate() RETURNS void
AS '$libdir/gphdfs.so', 'gphdfsprotocol_validate_urls'
LANGUAGE C STABLE;

CREATE TRUSTED PROTOCOL gphdfs (
  writefunc     = 'gphdfs_write',
  readfunc      = 'gphdfs_read',
  validatorfunc = 'gphdfs_validate');

create or replace function @gpupgradeschemaname@.grant_gphdfs() returns int as $$
declare
  rn name;
begin
  for rn in select rolname from pg_authid where rolcreaterexthdfs = true loop
    execute 'grant select on protocol gphdfs to '|| rn;
  end loop;
  for rn in select rolname from pg_authid where rolcreatewexthdfs = true loop
    execute 'grant insert on protocol gphdfs to '|| rn;
  end loop;
  
  return 1;
end;
$$ language 'plpgsql';

select @gpupgradeschemaname@.grant_gphdfs() where current_database() != 'template0';
drop function @gpupgradeschemaname@.grant_gphdfs();

-- fixedwidth functions
CREATE FUNCTION @gpupgradeschemaname@.fixedwidth_in() RETURNS record LANGUAGE c STABLE AS '$libdir/fixedwidth.so', 'fixedwidth_in';
CREATE FUNCTION @gpupgradeschemaname@.fixedwidth_out(record) RETURNS bytea LANGUAGE c STABLE AS '$libdir/fixedwidth.so', 'fixedwidth_out'; 
 
-- Column compression functions

CREATE FUNCTION @gpupgradeschemaname@.gp_quicklz_constructor(internal, internal, bool) RETURNS internal LANGUAGE internal VOLATILE AS 'quicklz_constructor' WITH (OID=5076, DESCRIPTION="quicklz constructor");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_quicklz_constructor(internal, internal, bool) IS 'quicklz constructor';

CREATE FUNCTION @gpupgradeschemaname@.gp_quicklz_destructor(internal) RETURNS void LANGUAGE internal VOLATILE AS 'quicklz_destructor' WITH(OID=5077, DESCRIPTION="quicklz destructor");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_quicklz_destructor(internal) IS 'quicklz destructor';

CREATE FUNCTION @gpupgradeschemaname@.gp_quicklz_compress(internal, int4, internal, int4, internal, internal) RETURNS void LANGUAGE internal IMMUTABLE AS 'quicklz_compress' WITH(OID=5078, DESCRIPTION="quicklz compressor");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_quicklz_compress(internal, int4, internal, int4, internal, internal) IS 'quicklz compressor';

CREATE FUNCTION @gpupgradeschemaname@.gp_quicklz_decompress(internal, int4, internal, int4, internal, internal) RETURNS void LANGUAGE internal IMMUTABLE AS 'quicklz_decompress' WITH(OID=5079, DESCRIPTION="quicklz decompressor");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_quicklz_decompress(internal, int4, internal, int4, internal, internal) IS 'quicklz decompressor';

CREATE FUNCTION @gpupgradeschemaname@.gp_quicklz_validator(internal) RETURNS void LANGUAGE internal IMMUTABLE AS 'quicklz_validator' WITH(OID=9925, DESCRIPTION="quicklz compression validator");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_quicklz_validator(internal) IS 'quicklz compression validator';

CREATE FUNCTION @gpupgradeschemaname@.gp_zlib_constructor(internal, internal, bool) RETURNS internal LANGUAGE internal VOLATILE AS 'zlib_constructor' WITH (OID=9910, DESCRIPTION="zlib constructor");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_zlib_constructor(internal, internal, bool) IS 'zlib constructor';

CREATE FUNCTION @gpupgradeschemaname@.gp_zlib_destructor(internal) RETURNS void LANGUAGE internal VOLATILE AS 'zlib_destructor' WITH(OID=9911, DESCRIPTION="zlib destructor");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_zlib_destructor(internal) IS 'zlib destructor';

CREATE FUNCTION @gpupgradeschemaname@.gp_zlib_compress(internal, int4, internal, int4, internal, internal) RETURNS void LANGUAGE internal IMMUTABLE AS 'zlib_compress' WITH(OID=9912, DESCRIPTION="zlib compressor");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_zlib_compress(internal, int4, internal, int4, internal, internal) IS 'zlib compressor';

CREATE FUNCTION @gpupgradeschemaname@.gp_zlib_decompress(internal, int4, internal, int4, internal, internal) RETURNS void LANGUAGE internal IMMUTABLE AS 'zlib_decompress' WITH(OID=9913, DESCRIPTION="zlib decompressor");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_zlib_decompress(internal, int4, internal, int4, internal, internal)  IS 'zlib decompressor';

CREATE FUNCTION @gpupgradeschemaname@.gp_zlib_validator(internal) RETURNS void LANGUAGE internal IMMUTABLE AS 'zlib_validator' WITH(OID=9924, DESCRIPTION="zlib compression validator");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_zlib_validator(internal) IS 'zlib compression validator';

CREATE FUNCTION @gpupgradeschemaname@.gp_rle_type_constructor(internal, internal, bool) RETURNS internal LANGUAGE internal VOLATILE AS 'rle_type_constructor' WITH (OID=9914, DESCRIPTION="Type specific RLE constructor");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_rle_type_constructor(internal, internal, bool) IS 'Type specific RLE constructor';

CREATE FUNCTION @gpupgradeschemaname@.gp_rle_type_destructor(internal) RETURNS void LANGUAGE internal VOLATILE AS 'rle_type_destructor' WITH(OID=9915, DESCRIPTION="Type specific RLE destructor");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_rle_type_destructor(internal)  IS 'Type specific RLE destructor';

CREATE FUNCTION @gpupgradeschemaname@.gp_rle_type_compress(internal, int4, internal, int4, internal, internal) RETURNS void LANGUAGE internal IMMUTABLE AS 'rle_type_compress' WITH(OID=9916, DESCRIPTION="Type specific RLE compressor");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_rle_type_compress(internal, int4, internal, int4, internal, internal) IS 'Type specific RLE compressor';

CREATE FUNCTION @gpupgradeschemaname@.gp_rle_type_decompress(internal, int4, internal, int4, internal, internal) RETURNS void LANGUAGE internal IMMUTABLE AS 'rle_type_decompress' WITH(OID=9917, DESCRIPTION="Type specific RLE decompressor");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_rle_type_decompress(internal, int4, internal, int4, internal, internal)  IS 'Type specific RLE decompressor';

CREATE FUNCTION @gpupgradeschemaname@.gp_rle_type_validator(internal) RETURNS void LANGUAGE internal IMMUTABLE AS 'rle_type_validator' WITH(OID=9923, DESCRIPTION="Type speific RLE compression validator");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_rle_type_validator(internal)  IS 'Type speific RLE compression validator';

CREATE FUNCTION @gpupgradeschemaname@.gp_dummy_compression_constructor(internal, internal, bool) RETURNS internal LANGUAGE internal VOLATILE AS 'dummy_compression_constructor' WITH (OID=3064, DESCRIPTION="Dummy compression destructor");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_dummy_compression_constructor(internal, internal, bool) IS 'Dummy compression destructor';

CREATE FUNCTION @gpupgradeschemaname@.gp_dummy_compression_destructor(internal) RETURNS internal LANGUAGE internal VOLATILE AS 'dummy_compression_destructor' WITH (OID=3065, DESCRIPTION="Dummy compression destructor");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_dummy_compression_destructor(internal)  IS 'Dummy compression destructor';

CREATE FUNCTION @gpupgradeschemaname@.gp_dummy_compression_compress(internal, int4, internal, int4, internal, internal) RETURNS internal LANGUAGE internal VOLATILE AS 'dummy_compression_compress' WITH (OID=3066, DESCRIPTION="Dummy compression compressor");
COMMENT ON FUNCTION  @gpupgradeschemaname@.gp_dummy_compression_compress(internal, int4, internal, int4, internal, internal) IS 'Dummy compression compressor';

CREATE FUNCTION @gpupgradeschemaname@.gp_dummy_compression_decompress(internal, int4, internal, int4, internal, internal) RETURNS internal LANGUAGE internal VOLATILE AS 'dummy_compression_decompress' WITH (OID=3067, DESCRIPTION="Dummy compression decompressor");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_dummy_compression_decompress(internal, int4, internal, int4, internal, internal) IS 'Dummy compression decompressor';

CREATE FUNCTION @gpupgradeschemaname@.gp_dummy_compression_validator(internal) RETURNS internal LANGUAGE internal VOLATILE AS 'dummy_compression_validator' WITH (OID=3068, DESCRIPTION="Dummy compression validator");
COMMENT ON FUNCTION @gpupgradeschemaname@.gp_dummy_compression_validator(internal) IS 'Dummy compression validator';

--
-- Rename index using tidycat convention
--
alter index @gpupgradeschemaname@.pg_language_name_index rename to pg_language_lanname_index;
--
-- Cosh/Sinh/Tanh
--
CREATE FUNCTION @gpupgradeschemaname@.cosh(float8) RETURNS float8 LANGUAGE internal IMMUTABLE AS 'dcosh' WITH (OID=3539);
COMMENT ON FUNCTION @gpupgradeschemaname@.cosh(float8) IS 'Hyperbolic cosine function';

CREATE FUNCTION @gpupgradeschemaname@.sinh(float8) RETURNS float8 LANGUAGE internal IMMUTABLE AS 'dsinh' WITH (OID=3540);
COMMENT ON FUNCTION @gpupgradeschemaname@.sinh(float8) IS 'Hyperbolic sine function';

CREATE FUNCTION @gpupgradeschemaname@.tanh(float8) RETURNS float8 LANGUAGE internal IMMUTABLE AS 'dtanh' WITH (OID=3541);
COMMENT ON FUNCTION @gpupgradeschemaname@.tanh(float8) IS 'Hyperbolic tangent function';


--
--  Anytable
--
CREATE TYPE @gpupgradeschemaname@.anytable (oid=3053);

CREATE FUNCTION @gpupgradeschemaname@.anytable_in(cstring) RETURNS @gpupgradeschemaname@.anytable LANGUAGE internal IMMUTABLE STRICT AS 'anytable_in' WITH (OID=3054);
COMMENT ON FUNCTION @gpupgradeschemaname@.anytable_in(cstring) IS 'anytable type serialization input function';

CREATE FUNCTION @gpupgradeschemaname@.anytable_out(@gpupgradeschemaname@.anytable) RETURNS cstring LANGUAGE internal IMMUTABLE STRICT AS 'anytable_out' WITH (OID=3055);
COMMENT ON  FUNCTION @gpupgradeschemaname@.anytable_out(@gpupgradeschemaname@.anytable) IS 'anytable type serialization output function';

CREATE TYPE @gpupgradeschemaname@.anytable(
   INPUT = @gpupgradeschemaname@.anytable_in,
   OUTPUT = @gpupgradeschemaname@.anytable_out,
   INTERNALLENGTH = VARIABLE,
   STORAGE = extended,
   DELIMITER = ',',
   ALIGNMENT = double,
   TYPTYPE = 'p'
);
COMMENT ON TYPE @gpupgradeschemaname@.anytable IS 'Represents a generic TABLE value expression';
--
--  XML
--
CREATE TYPE @gpupgradeschemaname@.xml (oid=142);

CREATE FUNCTION @gpupgradeschemaname@.xml_in(cstring) RETURNS @gpupgradeschemaname@.xml LANGUAGE internal IMMUTABLE STRICT AS 'xml_in' WITH (OID=2973);
COMMENT ON FUNCTION @gpupgradeschemaname@.xml_in(cstring) IS 'I/O';
CREATE FUNCTION @gpupgradeschemaname@.xml_out(@gpupgradeschemaname@.xml) RETURNS cstring LANGUAGE internal IMMUTABLE STRICT AS 'xml_out' WITH (OID=2974);
COMMENT ON FUNCTION @gpupgradeschemaname@.xml_out(@gpupgradeschemaname@.xml) IS 'I/O';
 CREATE FUNCTION @gpupgradeschemaname@.xml_recv(internal) RETURNS @gpupgradeschemaname@.xml LANGUAGE internal IMMUTABLE STRICT AS 'xml_recv' WITH (OID=2978);
COMMENT ON FUNCTION @gpupgradeschemaname@.xml_recv(internal) IS 'I/O';
 CREATE FUNCTION @gpupgradeschemaname@.xml_send(@gpupgradeschemaname@.xml) RETURNS bytea LANGUAGE internal IMMUTABLE STRICT AS 'xml_send' WITH (OID=2979);
COMMENT ON FUNCTION @gpupgradeschemaname@.xml_send(@gpupgradeschemaname@.xml) IS 'I/O';

CREATE TYPE @gpupgradeschemaname@.xml(
   INPUT = @gpupgradeschemaname@.xml_in,
   OUTPUT = @gpupgradeschemaname@.xml_out,
   SEND = @gpupgradeschemaname@.xml_send,
   RECEIVE = @gpupgradeschemaname@.xml_recv,
   INTERNALLENGTH = VARIABLE,
   STORAGE = extended,
   DELIMITER = ',',
   ALIGNMENT = integer,
   SHADOWOID = 143
);
COMMENT ON TYPE @gpupgradeschemaname@.xml IS 'XML content';

CREATE FUNCTION @gpupgradeschemaname@.xmlcomment(text) RETURNS @gpupgradeschemaname@.xml LANGUAGE internal IMMUTABLE STRICT AS 'xmlcomment' WITH (OID=2975);
COMMENT ON FUNCTION @gpupgradeschemaname@.xmlcomment(text) IS 'generate XML comment';
CREATE FUNCTION @gpupgradeschemaname@.xml(text) RETURNS @gpupgradeschemaname@.xml LANGUAGE internal IMMUTABLE STRICT AS 'texttoxml' WITH (OID=2976);
COMMENT ON FUNCTION @gpupgradeschemaname@.xml(text) IS 'perform a non-validating parse of a character string to produce an XML value';
 CREATE FUNCTION @gpupgradeschemaname@.xmlvalidate(@gpupgradeschemaname@.xml, text) RETURNS bool LANGUAGE internal IMMUTABLE STRICT AS 'xmlvalidate' WITH (OID=2977);
COMMENT ON FUNCTION @gpupgradeschemaname@.xmlvalidate(@gpupgradeschemaname@.xml, text) IS 'validate an XML value';
 CREATE FUNCTION @gpupgradeschemaname@.xmlconcat2(@gpupgradeschemaname@.xml, @gpupgradeschemaname@.xml) RETURNS @gpupgradeschemaname@.xml LANGUAGE internal IMMUTABLE STRICT AS 'xmlconcat2' WITH (OID=2980);
COMMENT ON FUNCTION @gpupgradeschemaname@.xmlconcat2(@gpupgradeschemaname@.xml, @gpupgradeschemaname@.xml) IS 'aggregate transition function';
 CREATE FUNCTION @gpupgradeschemaname@.text(@gpupgradeschemaname@.xml) RETURNS text LANGUAGE internal IMMUTABLE STRICT AS 'xmltotext' WITH (OID=2982);
COMMENT ON FUNCTION @gpupgradeschemaname@.text(@gpupgradeschemaname@.xml) IS 'serialize an XML value to a character string';
 CREATE FUNCTION @gpupgradeschemaname@.xpath(text, @gpupgradeschemaname@.xml, _text) RETURNS @gpupgradeschemaname@._xml LANGUAGE internal IMMUTABLE STRICT AS 'xpath' WITH (OID=2983);
COMMENT ON FUNCTION @gpupgradeschemaname@.xpath(text, @gpupgradeschemaname@.xml, _text) IS 'evaluate XPath expression, with namespaces support';
 CREATE FUNCTION @gpupgradeschemaname@.xpath(text, @gpupgradeschemaname@.xml) RETURNS @gpupgradeschemaname@._xml LANGUAGE sql IMMUTABLE STRICT AS $$select @gpupgradeschemaname@.xpath($1, $2, '{}'::pg_catalog.text[])$$ WITH (OID=2984);
COMMENT ON FUNCTION @gpupgradeschemaname@.xpath(text, @gpupgradeschemaname@.xml) IS 'evaluate XPath expression';
 CREATE FUNCTION @gpupgradeschemaname@.xmlexists(text, @gpupgradeschemaname@.xml) RETURNS bool LANGUAGE internal IMMUTABLE STRICT AS 'xmlexists' WITH (OID=2985);
COMMENT ON FUNCTION @gpupgradeschemaname@.xmlexists(text, @gpupgradeschemaname@.xml) IS 'test XML value against XPath expression';
 CREATE FUNCTION @gpupgradeschemaname@.xpath_exists(text, @gpupgradeschemaname@.xml, _text) RETURNS bool LANGUAGE internal IMMUTABLE STRICT AS 'xpath_exists' WITH (OID=2986);
COMMENT ON FUNCTION @gpupgradeschemaname@.xpath_exists(text, @gpupgradeschemaname@.xml, _text) IS 'test XML value against XPath expression, with namespace support';
 CREATE FUNCTION @gpupgradeschemaname@.xpath_exists(text, @gpupgradeschemaname@.xml) RETURNS bool LANGUAGE sql IMMUTABLE STRICT AS $$select @gpupgradeschemaname@.xpath_exists($1, $2, '{}'::pg_catalog.text[])$$ WITH (OID=2987);
COMMENT ON FUNCTION @gpupgradeschemaname@.xpath_exists(text, @gpupgradeschemaname@.xml) IS 'test XML value against XPath expression';
 CREATE FUNCTION @gpupgradeschemaname@.xml_is_well_formed(text) RETURNS bool LANGUAGE internal IMMUTABLE STRICT AS 'xml_is_well_formed' WITH (OID=2988);
COMMENT ON FUNCTION @gpupgradeschemaname@.xml_is_well_formed(text) IS 'determine if a string is well formed XML';
 CREATE FUNCTION @gpupgradeschemaname@.xml_is_well_formed_document(text) RETURNS bool LANGUAGE internal IMMUTABLE STRICT AS 'xml_is_well_formed_document' WITH (OID=2989);
COMMENT ON FUNCTION @gpupgradeschemaname@.xml_is_well_formed_document(text) IS 'determine if a string is well formed XML document';
 CREATE FUNCTION @gpupgradeschemaname@.xml_is_well_formed_content(text) RETURNS bool LANGUAGE internal IMMUTABLE STRICT AS 'xml_is_well_formed_content' WITH (OID=2990);
COMMENT ON FUNCTION @gpupgradeschemaname@.xml_is_well_formed_content(text) IS 'determine if a string is well formed XML content';

create ordered aggregate @gpupgradeschemaname@.xmlagg(@gpupgradeschemaname@.xml) (
    stype     = @gpupgradeschemaname@.xml,
    sfunc     = @gpupgradeschemaname@.xmlconcat2,
    oid       = 2981
);
COMMENT ON AGGREGATE @gpupgradeschemaname@.xmlagg(@gpupgradeschemaname@.xml) IS 'concatenate XML values';

--
-- Dynamic partition elimination aggregate and its functions
--

CREATE FUNCTION @gpupgradeschemaname@.pg_partition_oid_transfn(internal, oid, record) RETURNS internal LANGUAGE internal IMMUTABLE AS 'pg_partition_oid_transfn' WITH (OID=2911);
COMMENT ON FUNCTION @gpupgradeschemaname@.pg_partition_oid_transfn(internal, oid, record) IS 'pg_partition_oid transition function';
CREATE FUNCTION @gpupgradeschemaname@.pg_partition_oid_finalfn(internal) RETURNS _oid LANGUAGE internal IMMUTABLE AS 'pg_partition_oid_finalfn' WITH (OID=2912);
COMMENT ON FUNCTION @gpupgradeschemaname@.pg_partition_oid_finalfn(internal) IS 'pg_partition_oid final function';

CREATE AGGREGATE @gpupgradeschemaname@.pg_partition_oid(oid, record) (
	stype		= internal,
	sfunc		= pg_partition_oid_transfn,
	finalfunc	= pg_partition_oid_finalfn,
	oid			= 2913
);

-- Fixes gp_relation_node relhaspkey
update @gpupgradeschemaname@.pg_class set relhaspkey = false where relnamespace = 11 and relname = 'gp_relation_node';
select @gpupgradeschemaname@.catDML(
'update @gpupgradeschemaname@.pg_class set relhaspkey = false where relnamespace = 11 and relname = ''gp_relation_node''')
from gp_dist_random('gp_version_at_initdb');


---
--- Fixes PL/Java template
---
update @gpupgradeschemaname@.pg_pltemplate set tmpltrusted=true where tmplname='pljava';
select catDML('update @gpupgradeschemaname@.pg_pltemplate set tmpltrusted=true where tmplname=''pljava''')
  from gp_dist_random('gp_version_at_initdb');

insert into @gpupgradeschemaname@.pg_pltemplate 
  select 'pljavau', false, 'pljavau_call_handler', null, '$libdir/pljava', null
  where (select count(*) from @gpupgradeschemaname@.pg_pltemplate where tmplname='pljavau')=0;
select catDML('insert into @gpupgradeschemaname@.pg_pltemplate 
  select ''pljavau'', false, ''pljavau_call_handler'', null, ''$libdir/pljava'', null
  where (select count(*) from @gpupgradeschemaname@.pg_pltemplate where tmplname=''pljavau'')=0') from gp_dist_random('gp_version_at_initdb');


-- Column compression improvements assume that all CO tables have
-- per column meta data.
INSERT INTO @gpupgradeschemaname@.pg_attribute_encoding
	SELECT relid as attrelid,
	attnum,
	-- string_to_array(array_to_string()) gets rid of NULLs for us
	string_to_array(
		array_to_string(
			array[blocksize,compresstype, compresslevel],
			','),
		',')
	FROM (
		SELECT relid,
		-- See the trick above with respect to removing unnecessary entries
		-- blocksize = 32768 is the default, so we don't want to represent
		-- this.
		CASE WHEN blocksize IS NULL THEN null ELSE
			'blocksize=' || blocksize::text END AS blocksize,
		CASE WHEN compresstype IS NULL THEN 'compresstype=none' ELSE
			'compresstype=' || compresstype END AS compresstype,
		CASE WHEN compresstype IS NULL THEN 'compresslevel=0' ELSE
			'compresslevel=' || compresslevel::text END AS compresslevel
		FROM pg_appendonly
		WHERE columnstore='t') a,
		pg_attribute t
		WHERE a.relid = t.attrelid AND t.attnum > 0;

SELECT
	@gpupgradeschemaname@.catDML('

INSERT INTO @gpupgradeschemaname@.pg_attribute_encoding
	SELECT relid as attrelid,
	attnum,
	string_to_array(
		array_to_string(
			array[blocksize,compresstype, compresslevel],
			'',''),
		'','')
	FROM (
		SELECT relid,
		CASE WHEN blocksize is null THEN null ELSE
			''blocksize='' || blocksize::text END AS blocksize,
		CASE WHEN compresstype IS NULL THEN ''compresstype=none'' ELSE
			''compresstype='' || compresstype END AS compresstype,
		CASE WHEN compresstype IS NULL THEN ''compresslevel=0'' ELSE
			''compresslevel='' || compresslevel::text END AS compresslevel
		FROM pg_appendonly
		WHERE columnstore=''t'') a,
		pg_attribute t
		WHERE a.relid = t.attrelid AND t.attnum > 0;')
	FROM gp_dist_random('gp_version_at_initdb');

-- pg_compression

-- psql expands this for us
\set pgcompressiondatafile `echo "'$GPHOME/share/postgresql/upgrade/pg_compression.data'"`

-- Create a special schema for use by the pg_compression_load external table.
-- We cannot use gpupgradeschemaname (pg_catalog), as that will see the external
-- table executed on the master only.
create schema __@gpupgradeschemaname@_gpmigrator;

-- Add entries to the master.
COPY @gpupgradeschemaname@.pg_compression FROM
	:pgcompressiondatafile WITH OIDS DELIMITER ',';

create external web table 
	__@gpupgradeschemaname@_gpmigrator.pg_compression_load(database text,
											  port text,
											  status text)
  execute ' PGOPTIONS=''-c gp_session_role=utility'' psql -q --set ON_ERROR_STOP=ON -p $GP_SEG_PORT --command "copy @gpupgradeschemaname@.pg_compression from ''$GPHOME/share/postgresql/upgrade/pg_compression.data'' with oids csv" $GP_DATABASE $GP_USER && echo "$GP_DATABASE, $GP_SEG_PORT, done";'
  format 'csv';

select * from __@gpupgradeschemaname@_gpmigrator.pg_compression_load;

drop external web table __@gpupgradeschemaname@_gpmigrator.pg_compression_load;

drop schema __@gpupgradeschemaname@_gpmigrator;

---
--- Fixes PL/Java template
---
update @gpupgradeschemaname@.pg_pltemplate set tmpltrusted=true where tmplname='pljava';
select catDML('update @gpupgradeschemaname@.pg_pltemplate set tmpltrusted=true where tmplname=''pljava''')
  from gp_dist_random('gp_version_at_initdb');

insert into @gpupgradeschemaname@.pg_pltemplate 
  select 'pljavau', false, 'pljavau_call_handler', null, '$libdir/pljava', null
  where (select count(*) from @gpupgradeschemaname@.pg_pltemplate where tmplname='pljavau')=0;
select catDML('insert into @gpupgradeschemaname@.pg_pltemplate 
  select ''pljavau'', false, ''pljavau_call_handler'', null, ''$libdir/pljava'', null
  where (select count(*) from @gpupgradeschemaname@.pg_pltemplate where tmplname=''pljavau'')=0') from gp_dist_random('gp_version_at_initdb');


---
--- Misc catalog cleanup
---
comment on type @gpupgradeschemaname@.line is 'geometric line (not implemented)';
