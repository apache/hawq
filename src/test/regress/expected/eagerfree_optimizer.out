drop table if exists smallt;
NOTICE:  table "smallt" does not exist, skipping
create table smallt (i int, t text, d date) distributed by (i);
insert into smallt select i%10, 'text ' || (i%15), '2011-01-01'::date + ((i%20) || ' days')::interval
from generate_series(0, 99) i;
drop table if exists bigt;
NOTICE:  table "bigt" does not exist, skipping
create table bigt (i int, t text, d date) distributed by (i);
insert into bigt select i/10, 'text ' || (i/15), '2011-01-01'::date + ((i/20) || ' days')::interval
from generate_series(0, 999999) i;
drop table if exists smallt2;
NOTICE:  table "smallt2" does not exist, skipping
create table smallt2 (i int, t text, d date) distributed by (i);
insert into smallt2 select i%5, 'text ' || (i%10), '2011-01-01'::date + ((i%15) || ' days')::interval
from generate_series(0, 49) i;
-- HashAgg, Agg
select d, count(*) from smallt group by d;
     d      | count 
------------+-------
 01-01-2011 |     5
 01-09-2011 |     5
 01-17-2011 |     5
 01-04-2011 |     5
 01-12-2011 |     5
 01-20-2011 |     5
 01-07-2011 |     5
 01-15-2011 |     5
 01-02-2011 |     5
 01-10-2011 |     5
 01-18-2011 |     5
 01-05-2011 |     5
 01-13-2011 |     5
 01-08-2011 |     5
 01-16-2011 |     5
 01-03-2011 |     5
 01-11-2011 |     5
 01-19-2011 |     5
 01-06-2011 |     5
 01-14-2011 |     5
(20 rows)

explain analyze select d, count(*) from smallt group by d;
                                                                                                                                         QUERY PLAN                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 8:1  (slice2; segments: 8)  (cost=0.00..431.00 rows=20 width=12)
   Rows out:  20 rows at destination with 29 ms to first row, 30 ms to end, start offset by 0.626/0.626 ms.
   ->  GroupAggregate  (cost=0.00..431.00 rows=3 width=12)
         Group By: d
         Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg6:xzhangmac) 3/3 rows with 17/26 ms to end, start offset by 13/3.963 ms.
         ->  Sort  (cost=0.00..431.00 rows=3 width=12)
               Sort Key: d
               Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg6:xzhangmac) 3/3 rows with 17/26 ms to end, start offset by 13/3.964 ms.
               Executor memory:  61K bytes avg, 61K bytes max (seg0:xzhangmac).
               Work_mem used:  61K bytes avg, 61K bytes max (seg0:xzhangmac). Workfile: (0 spilling, 0 reused)
               ->  Redistribute Motion 8:8  (slice1; segments: 8)  (cost=0.00..431.00 rows=3 width=12)
                     Hash Key: d
                     Rows out:  Avg 2.5 rows x 8 workers at destination.  Max/Last(seg0:xzhangmac/seg1:xzhangmac) 3/3 rows with 4.952/13 ms to first row, 16/24 ms to end, start offset by 14/5.650 ms.
                     ->  Result  (cost=0.00..431.00 rows=3 width=12)
                           Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg3:xzhangmac) 4/2 rows with 12/16 ms to end, start offset by 4.009/6.031 ms.
                           ->  GroupAggregate  (cost=0.00..431.00 rows=3 width=12)
                                 Group By: d
                                 Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg3:xzhangmac) 4/2 rows with 12/16 ms to end, start offset by 4.010/6.031 ms.
                                 ->  Sort  (cost=0.00..431.00 rows=13 width=4)
                                       Sort Key: d
                                       Rows out:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg3:xzhangmac) 20/10 rows with 12/16 ms to end, start offset by 4.010/6.031 ms.
                                       Executor memory:  61K bytes avg, 61K bytes max (seg0:xzhangmac).
                                       Work_mem used:  61K bytes avg, 61K bytes max (seg0:xzhangmac). Workfile: (0 spilling, 0 reused)
                                       ->  Table Scan on smallt  (cost=0.00..431.00 rows=13 width=4)
                                             Rows out:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg3:xzhangmac) 20/10 rows with 11/15 ms to end, start offset by 4.825/6.993 ms.
 Slice statistics:
   (slice0)    Executor memory: 223K bytes.
   (slice1)    Executor memory: 367K bytes avg x 8 workers, 379K bytes max (seg2:xzhangmac).  Work_mem: 61K bytes max.
   (slice2)    Executor memory: 211K bytes avg x 8 workers, 211K bytes max (seg0:xzhangmac).  Work_mem: 61K bytes max.
 Statement statistics:
   Memory used: 131072K bytes
 Settings:  default_segment_num=8
 Optimizer status: PQO version 1.611
 Dispatcher statistics:
   executors used(total/cached/new connection): (16/16/0); dispatcher time(total/connection/dispatch data): (0.270 ms/0.000 ms/0.133 ms).
   dispatch data time(max/min/avg): (0.028 ms/0.005 ms/0.008 ms); consume executor data time(max/min/avg): (0.034 ms/0.003 ms/0.011 ms); free executor time(max/min/avg): (0.000 ms/0.000 ms/0.000 ms).
 Data locality statistics:
   data locality ratio: 1.000; virtual segment number: 8; different host number: 1; virtual segment number per host(avg/min/max): (8/8/8); segment size(avg/min/max): (352.000/288/544); segment size with penalty(avg/min/max): (0.000/0/0); continuity(avg/min/max): (1.000/1.000/1.000).
 Total runtime: 31.105 ms
(39 rows)

set statement_mem=2560;
select count(*) from (select i, t, d, count(*) from bigt group by i, t, d) tmp;
 count  
--------
 133333
(1 row)

explain analyze select count(*) from (select i, t, d, count(*) from bigt group by i, t, d) tmp;
                                                                                                                                               QUERY PLAN                                                                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..482.50 rows=1 width=8)
   Rows out:  1 rows with 571 ms to end, start offset by 0.617/0.617 ms.
   ->  Gather Motion 8:1  (slice1; segments: 8)  (cost=0.00..482.50 rows=1 width=8)
         Rows out:  8 rows at destination with 523 ms to first row, 571 ms to end, start offset by 0.619/0.619 ms.
         ->  Aggregate  (cost=0.00..482.50 rows=1 width=8)
               Rows out:  Avg 1.0 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg2:xzhangmac) 1/1 rows with 536/566 ms to end, start offset by 9.635/5.295 ms.
               ->  HashAggregate  (cost=0.00..482.50 rows=125000 width=1)
                     Group By: i, t, d
                     Rows out:  Avg 16666.6 rows x 8 workers.  Max/Last(seg6:xzhangmac/seg2:xzhangmac) 16670/16663 rows with 504/539 ms to first row, 542/562 ms to end, start offset by 5.493/5.296 ms.
                     Executor memory:  25609K bytes avg, 25609K bytes max (seg0:xzhangmac).
                     ->  Table Scan on bigt  (cost=0.00..433.20 rows=125000 width=18)
                           Rows out:  Avg 125000.0 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg1:xzhangmac) 125000/125000 rows with 19/15 ms to first row, 122/154 ms to end, start offset by 25/21 ms.
 Slice statistics:
   (slice0)    Executor memory: 223K bytes.
   (slice1)    Executor memory: 25887K bytes avg x 8 workers, 25887K bytes max (seg0:xzhangmac).
 Statement statistics:
   Memory used: 131072K bytes
 Settings:  default_segment_num=8
 Optimizer status: PQO version 1.611
 Dispatcher statistics:
   executors used(total/cached/new connection): (8/8/0); dispatcher time(total/connection/dispatch data): (0.235 ms/0.000 ms/0.128 ms).
   dispatch data time(max/min/avg): (0.032 ms/0.008 ms/0.015 ms); consume executor data time(max/min/avg): (0.020 ms/0.011 ms/0.015 ms); free executor time(max/min/avg): (0.000 ms/0.000 ms/0.000 ms).
 Data locality statistics:
   data locality ratio: 1.000; virtual segment number: 8; different host number: 1; virtual segment number per host(avg/min/max): (8/8/8); segment size(avg/min/max): (4103280.000/4103280/4103280); segment size with penalty(avg/min/max): (0.000/0/0); continuity(avg/min/max): (1.000/1.000/1.000).
 Total runtime: 571.627 ms
(25 rows)

set statement_mem=128000;
-- DQA
set gp_enable_agg_distinct=off;
set gp_eager_one_phase_agg=on;
select count(distinct d) from smallt;
 count 
-------
    20
(1 row)

explain analyze select count(distinct d) from smallt;
                                                                                                                                         QUERY PLAN                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..431.00 rows=1 width=8)
   Rows out:  1 rows with 31 ms to end, start offset by 0.566/0.566 ms.
   ->  Gather Motion 8:1  (slice2; segments: 8)  (cost=0.00..431.00 rows=20 width=4)
         Rows out:  20 rows at destination with 31 ms to end, start offset by 0.567/0.567 ms.
         ->  GroupAggregate  (cost=0.00..431.00 rows=3 width=4)
               Group By: d
               Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg7:xzhangmac) 3/2 rows with 22/28 ms to end, start offset by 10/4.188 ms.
               ->  Sort  (cost=0.00..431.00 rows=3 width=4)
                     Sort Key: d
                     Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg7:xzhangmac) 3/2 rows with 22/28 ms to end, start offset by 10/4.189 ms.
                     Executor memory:  61K bytes avg, 61K bytes max (seg0:xzhangmac).
                     Work_mem used:  61K bytes avg, 61K bytes max (seg0:xzhangmac). Workfile: (0 spilling, 0 reused)
                     ->  Redistribute Motion 8:8  (slice1; segments: 8)  (cost=0.00..431.00 rows=3 width=4)
                           Hash Key: d
                           Rows out:  Avg 2.5 rows x 8 workers at destination.  Max/Last(seg0:xzhangmac/seg7:xzhangmac) 3/2 rows with 18/22 ms to first row, 21/27 ms to end, start offset by 11/5.183 ms.
                           ->  GroupAggregate  (cost=0.00..431.00 rows=3 width=4)
                                 Group By: d
                                 Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg5:xzhangmac) 4/4 rows with 18/20 ms to end, start offset by 13/11 ms.
                                 ->  Sort  (cost=0.00..431.00 rows=13 width=4)
                                       Sort Key: d
                                       Rows out:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg5:xzhangmac) 20/20 rows with 18/20 ms to end, start offset by 13/11 ms.
                                       Executor memory:  61K bytes avg, 61K bytes max (seg0:xzhangmac).
                                       Work_mem used:  61K bytes avg, 61K bytes max (seg0:xzhangmac). Workfile: (0 spilling, 0 reused)
                                       ->  Table Scan on smallt  (cost=0.00..431.00 rows=13 width=4)
                                             Rows out:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg5:xzhangmac) 20/20 rows with 17/18 ms to end, start offset by 14/12 ms.
 Slice statistics:
   (slice0)    Executor memory: 223K bytes.
   (slice1)    Executor memory: 367K bytes avg x 8 workers, 379K bytes max (seg2:xzhangmac).  Work_mem: 61K bytes max.
   (slice2)    Executor memory: 211K bytes avg x 8 workers, 211K bytes max (seg0:xzhangmac).  Work_mem: 61K bytes max.
 Statement statistics:
   Memory used: 131072K bytes
 Settings:  default_segment_num=8; gp_enable_agg_distinct=off
 Optimizer status: PQO version 1.611
 Dispatcher statistics:
   executors used(total/cached/new connection): (16/16/0); dispatcher time(total/connection/dispatch data): (0.264 ms/0.000 ms/0.129 ms).
   dispatch data time(max/min/avg): (0.021 ms/0.005 ms/0.008 ms); consume executor data time(max/min/avg): (0.021 ms/0.005 ms/0.013 ms); free executor time(max/min/avg): (0.000 ms/0.000 ms/0.000 ms).
 Data locality statistics:
   data locality ratio: 1.000; virtual segment number: 8; different host number: 1; virtual segment number per host(avg/min/max): (8/8/8); segment size(avg/min/max): (352.000/288/544); segment size with penalty(avg/min/max): (0.000/0/0); continuity(avg/min/max): (1.000/1.000/1.000).
 Total runtime: 32.795 ms
(39 rows)

set statement_mem=2560;
select count(distinct d) from bigt;
 count 
-------
 50000
(1 row)

explain analyze select count(distinct d) from bigt;
                                                                                                                                               QUERY PLAN                                                                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=0.00..450.75 rows=1 width=8)
   Rows out:  1 rows with 497 ms to end, start offset by 0.668/0.668 ms.
   ->  Gather Motion 8:1  (slice2; segments: 8)  (cost=0.00..450.72 rows=49674 width=4)
         Rows out:  50000 rows at destination with 416 ms to first row, 481 ms to end, start offset by 0.669/0.669 ms.
         ->  HashAggregate  (cost=0.00..450.17 rows=6210 width=4)
               Group By: d
               Rows out:  Avg 6250.0 rows x 8 workers.  Max/Last(seg1:xzhangmac/seg1:xzhangmac) 6251/6251 rows with 425/425 ms to first row, 435/435 ms to end, start offset by 4.375/4.375 ms.
               Executor memory:  12489K bytes avg, 12489K bytes max (seg0:xzhangmac).
               ->  Redistribute Motion 8:8  (slice1; segments: 8)  (cost=0.00..449.41 rows=6210 width=4)
                     Hash Key: d
                     Rows out:  Avg 12500.0 rows x 8 workers at destination.  Max/Last(seg1:xzhangmac/seg1:xzhangmac) 12502/12502 rows with 246/246 ms to first row, 400/400 ms to end, start offset by 12/12 ms.
                     ->  HashAggregate  (cost=0.00..449.33 rows=6210 width=4)
                           Group By: d
                           Rows out:  Avg 12500.0 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg2:xzhangmac) 12500/12500 rows with 243/356 ms to first row, 269/376 ms to end, start offset by 4.374/18 ms.
                           Executor memory:  12681K bytes avg, 12681K bytes max (seg0:xzhangmac).
                           ->  Table Scan on bigt  (cost=0.00..433.20 rows=125000 width=4)
                                 Rows out:  Avg 125000.0 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg2:xzhangmac) 125000/125000 rows with 11/24 ms to first row, 127/212 ms to end, start offset by 11/27 ms.
 Slice statistics:
   (slice0)    Executor memory: 331K bytes.
   (slice1)    Executor memory: 13015K bytes avg x 8 workers, 13015K bytes max (seg0:xzhangmac).
   (slice2)    Executor memory: 12771K bytes avg x 8 workers, 12771K bytes max (seg0:xzhangmac).
 Statement statistics:
   Memory used: 131072K bytes
 Settings:  default_segment_num=8; gp_enable_agg_distinct=off
 Optimizer status: PQO version 1.611
 Dispatcher statistics:
   executors used(total/cached/new connection): (16/16/0); dispatcher time(total/connection/dispatch data): (0.279 ms/0.000 ms/0.142 ms).
   dispatch data time(max/min/avg): (0.018 ms/0.005 ms/0.009 ms); consume executor data time(max/min/avg): (0.049 ms/0.008 ms/0.018 ms); free executor time(max/min/avg): (0.000 ms/0.000 ms/0.000 ms).
 Data locality statistics:
   data locality ratio: 1.000; virtual segment number: 8; different host number: 1; virtual segment number per host(avg/min/max): (8/8/8); segment size(avg/min/max): (4103280.000/4103280/4103280); segment size with penalty(avg/min/max): (0.000/0/0); continuity(avg/min/max): (1.000/1.000/1.000).
 Total runtime: 497.994 ms
(31 rows)

set statement_mem=128000;
set gp_enable_agg_distinct=on;
set gp_eager_one_phase_agg=off;
-- Rescan on Agg (with Material in the inner side of nestloop)
set enable_nestloop=on;
set enable_hashjoin=off;
select t1.*, t2.* from
(select d, count(*) from smallt group by d) as t1, (select d, sum(i) from smallt group by d) as t2
where t1.d = t2.d;
     d      | count |     d      | sum 
------------+-------+------------+-----
 01-01-2011 |     5 | 01-01-2011 |   0
 01-09-2011 |     5 | 01-09-2011 |  40
 01-17-2011 |     5 | 01-17-2011 |  30
 01-04-2011 |     5 | 01-04-2011 |  15
 01-12-2011 |     5 | 01-12-2011 |   5
 01-20-2011 |     5 | 01-20-2011 |  45
 01-02-2011 |     5 | 01-02-2011 |   5
 01-10-2011 |     5 | 01-10-2011 |  45
 01-18-2011 |     5 | 01-18-2011 |  35
 01-07-2011 |     5 | 01-07-2011 |  30
 01-15-2011 |     5 | 01-15-2011 |  20
 01-08-2011 |     5 | 01-08-2011 |  35
 01-16-2011 |     5 | 01-16-2011 |  25
 01-05-2011 |     5 | 01-05-2011 |  20
 01-13-2011 |     5 | 01-13-2011 |  10
 01-03-2011 |     5 | 01-03-2011 |  10
 01-11-2011 |     5 | 01-11-2011 |   0
 01-19-2011 |     5 | 01-19-2011 |  40
 01-06-2011 |     5 | 01-06-2011 |  25
 01-14-2011 |     5 | 01-14-2011 |  15
(20 rows)

explain analyze select t1.*, t2.* from
(select d, count(*) from smallt group by d) as t1, (select d, sum(i) from smallt group by d) as t2
where t1.d = t2.d;
                                                                                                                                         QUERY PLAN                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 8:1  (slice3; segments: 8)  (cost=0.00..862.01 rows=20 width=24)
   Rows out:  20 rows at destination with 49 ms to end, start offset by 0.955/0.955 ms.
   ->  Hash Join  (cost=0.00..862.01 rows=3 width=24)
         Hash Cond: public.smallt.d = public.smallt.d
         Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg6:xzhangmac) 3/3 rows with 38/42 ms to first row, 39/43 ms to end, start offset by 10/7.087 ms.
         Executor memory:  1K bytes avg, 1K bytes max (seg0:xzhangmac).
         Work_mem used:  1K bytes avg, 1K bytes max (seg0:xzhangmac). Workfile: (0 spilling, 0 reused)
         (seg0)   Hash chain length 1.0 avg, 1 max, using 3 of 131111 buckets.
         ->  GroupAggregate  (cost=0.00..431.00 rows=3 width=12)
               Group By: public.smallt.d
               Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg0:xzhangmac) 3/3 rows with 1.511/1.511 ms to first row, 1.515/1.515 ms to end, start offset by 47/47 ms.
               ->  Sort  (cost=0.00..431.00 rows=3 width=12)
                     Sort Key: public.smallt.d
                     Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg0:xzhangmac) 3/3 rows with 1.505/1.505 ms to first row, 1.506/1.506 ms to end, start offset by 47/47 ms.
                     Executor memory:  29K bytes avg, 29K bytes max (seg0:xzhangmac).
                     Work_mem used:  29K bytes avg, 29K bytes max (seg0:xzhangmac). Workfile: (0 spilling, 0 reused)
                     ->  Redistribute Motion 8:8  (slice1; segments: 8)  (cost=0.00..431.00 rows=3 width=12)
                           Hash Key: public.smallt.d
                           Rows out:  Avg 2.5 rows x 8 workers at destination.  Max/Last(seg0:xzhangmac/seg7:xzhangmac) 3/2 rows with 0.015/0.009 ms to first row, 1.469/1.470 ms to end, start offset by 47/48 ms.
                           ->  Result  (cost=0.00..431.00 rows=3 width=12)
                                 Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg4:xzhangmac) 4/2 rows with 12/16 ms to end, start offset by 32/29 ms.
                                 ->  GroupAggregate  (cost=0.00..431.00 rows=3 width=12)
                                       Group By: public.smallt.d
                                       Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg4:xzhangmac) 4/2 rows with 12/16 ms to end, start offset by 32/29 ms.
                                       ->  Sort  (cost=0.00..431.00 rows=13 width=4)
                                             Sort Key: public.smallt.d
                                             Rows out:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg4:xzhangmac) 20/10 rows with 12/16 ms to end, start offset by 32/29 ms.
                                             Executor memory:  61K bytes avg, 61K bytes max (seg0:xzhangmac).
                                             Work_mem used:  61K bytes avg, 61K bytes max (seg0:xzhangmac). Workfile: (0 spilling, 0 reused)
                                             ->  Table Scan on smallt  (cost=0.00..431.00 rows=13 width=4)
                                                   Rows out:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg4:xzhangmac) 20/10 rows with 12/16 ms to end, start offset by 32/29 ms.
         ->  Hash  (cost=431.00..431.00 rows=3 width=12)
               Rows in:  Avg 2.5 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg6:xzhangmac) 3/3 rows with 37/40 ms to end, start offset by 10/7.264 ms.
               ->  GroupAggregate  (cost=0.00..431.00 rows=3 width=12)
                     Group By: public.smallt.d
                     Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg6:xzhangmac) 3/3 rows with 37/40 ms to end, start offset by 10/7.265 ms.
                     ->  Sort  (cost=0.00..431.00 rows=3 width=12)
                           Sort Key: public.smallt.d
                           Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg6:xzhangmac) 3/3 rows with 36/40 ms to end, start offset by 10/7.265 ms.
                           Executor memory:  61K bytes avg, 61K bytes max (seg0:xzhangmac).
                           Work_mem used:  61K bytes avg, 61K bytes max (seg0:xzhangmac). Workfile: (0 spilling, 0 reused)
                           ->  Redistribute Motion 8:8  (slice2; segments: 8)  (cost=0.00..431.00 rows=3 width=12)
                                 Hash Key: public.smallt.d
                                 Rows out:  Avg 2.5 rows x 8 workers at destination.  Max/Last(seg0:xzhangmac/seg6:xzhangmac) 3/3 rows with 13/19 ms to first row, 36/40 ms to end, start offset by 11/7.339 ms.
                                 ->  Result  (cost=0.00..431.00 rows=3 width=12)
                                       Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg2:xzhangmac) 4/4 rows with 13/13 ms to first row, 14/14 ms to end, start offset by 9.763/9.763 ms.
                                       ->  HashAggregate  (cost=0.00..431.00 rows=3 width=12)
                                             Group By: public.smallt.d
                                             Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg2:xzhangmac) 4/4 rows with 13/13 ms to first row, 14/14 ms to end, start offset by 9.763/9.763 ms.
                                             Executor memory:  3161K bytes avg, 3161K bytes max (seg0:xzhangmac).
                                             ->  Table Scan on smallt  (cost=0.00..431.00 rows=13 width=8)
                                                   Rows out:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg2:xzhangmac) 20/20 rows with 11/11 ms to end, start offset by 10/10 ms.
 Slice statistics:
   (slice0)    Executor memory: 364K bytes.
   (slice1)    Executor memory: 431K bytes avg x 8 workers, 431K bytes max (seg0:xzhangmac).  Work_mem: 61K bytes max.
   (slice2)    Executor memory: 3563K bytes avg x 8 workers, 3563K bytes max (seg0:xzhangmac).
   (slice3)    Executor memory: 1843K bytes avg x 8 workers, 1843K bytes max (seg0:xzhangmac).  Work_mem: 61K bytes max.
 Statement statistics:
   Memory used: 131072K bytes
 Settings:  default_segment_num=8; enable_hashjoin=off; enable_nestloop=on; gp_enable_agg_distinct=on
 Optimizer status: PQO version 1.611
 Dispatcher statistics:
   executors used(total/cached/new connection): (24/24/0); dispatcher time(total/connection/dispatch data): (0.374 ms/0.000 ms/0.205 ms).
   dispatch data time(max/min/avg): (0.024 ms/0.005 ms/0.008 ms); consume executor data time(max/min/avg): (0.019 ms/0.004 ms/0.010 ms); free executor time(max/min/avg): (0.000 ms/0.000 ms/0.000 ms).
 Data locality statistics:
   data locality ratio: 1.000; virtual segment number: 8; different host number: 1; virtual segment number per host(avg/min/max): (8/8/8); segment size(avg/min/max): (352.000/288/544); segment size with penalty(avg/min/max): (0.000/0/0); continuity(avg/min/max): (1.000/1.000/1.000).
 Total runtime: 51.323 ms
(67 rows)

set enable_nestloop=off;
set enable_hashjoin=on;
-- Rescan on Agg (with Material in the inner side of nestloop)
set enable_nestloop=on;
set enable_hashjoin=off;
select t1.*, t2.* from
(select i, count(*) from smallt group by i) as t1, (select i, sum(i) from smallt group by i) as t2
where t1.i = t2.i;
 i | count | i | sum 
---+-------+---+-----
 5 |    10 | 5 |  50
 6 |    10 | 6 |  60
 0 |    10 | 0 |   0
 8 |    10 | 8 |  80
 7 |    10 | 7 |  70
 1 |    10 | 1 |  10
 9 |    10 | 9 |  90
 3 |    10 | 3 |  30
 4 |    10 | 4 |  40
 2 |    10 | 2 |  20
(10 rows)

explain analyze select t1.*, t2.* from
(select i, count(*) from smallt group by i) as t1, (select i, sum(i) from smallt group by i) as t2
where t1.i = t2.i;
                                                                                                                                         QUERY PLAN                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 8:1  (slice1; segments: 8)  (cost=0.00..862.00 rows=10 width=24)
   Rows out:  10 rows at destination with 37 ms to first row, 45 ms to end, start offset by 0.587/0.587 ms.
   ->  Hash Join  (cost=0.00..862.00 rows=2 width=24)
         Hash Cond: public.smallt.i = public.smallt.i
         Rows out:  Avg 1.2 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg3:xzhangmac) 2/1 rows with 35/40 ms to first row, 37/41 ms to end, start offset by 4.501/4.616 ms.
         Executor memory:  1K bytes avg, 1K bytes max (seg2:xzhangmac).
         Work_mem used:  1K bytes avg, 1K bytes max (seg2:xzhangmac). Workfile: (0 spilling, 0 reused)
         (seg2)   Hash chain length 1.0 avg, 1 max, using 2 of 262151 buckets.
         ->  GroupAggregate  (cost=0.00..431.00 rows=2 width=12)
               Group By: public.smallt.i
               Rows out:  Avg 1.2 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg0:xzhangmac) 2/1 rows with 19/19 ms to end, start offset by 21/21 ms.
               ->  Sort  (cost=0.00..431.00 rows=13 width=4)
                     Sort Key: public.smallt.i
                     Rows out:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg0:xzhangmac) 20/10 rows with 19/19 ms to end, start offset by 21/21 ms.
                     Executor memory:  29K bytes avg, 29K bytes max (seg0:xzhangmac).
                     Work_mem used:  29K bytes avg, 29K bytes max (seg0:xzhangmac). Workfile: (0 spilling, 0 reused)
                     ->  Table Scan on smallt  (cost=0.00..431.00 rows=13 width=4)
                           Rows out:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg0:xzhangmac) 20/10 rows with 19/19 ms to end, start offset by 21/21 ms.
         ->  Hash  (cost=431.00..431.00 rows=2 width=12)
               Rows in:  Avg 1.2 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg3:xzhangmac) 2/1 rows with 15/28 ms to end, start offset by 6.485/6.521 ms.
               ->  GroupAggregate  (cost=0.00..431.00 rows=2 width=12)
                     Group By: public.smallt.i
                     Rows out:  Avg 1.2 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg3:xzhangmac) 2/1 rows with 15/28 ms to end, start offset by 6.486/6.522 ms.
                     ->  Sort  (cost=0.00..431.00 rows=13 width=4)
                           Sort Key: public.smallt.i
                           Rows out:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg3:xzhangmac) 20/10 rows with 15/28 ms to end, start offset by 6.487/6.523 ms.
                           Executor memory:  61K bytes avg, 61K bytes max (seg0:xzhangmac).
                           Work_mem used:  61K bytes avg, 61K bytes max (seg0:xzhangmac). Workfile: (0 spilling, 0 reused)
                           ->  Table Scan on smallt  (cost=0.00..431.00 rows=13 width=4)
                                 Rows out:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg3:xzhangmac) 20/10 rows with 14/27 ms to first row, 15/27 ms to end, start offset by 6.625/6.708 ms.
 Slice statistics:
   (slice0)    Executor memory: 223K bytes.
   (slice1)    Executor memory: 3459K bytes avg x 8 workers, 3459K bytes max (seg0:xzhangmac).  Work_mem: 61K bytes max.
 Statement statistics:
   Memory used: 131072K bytes
 Settings:  default_segment_num=8; enable_hashjoin=off; enable_nestloop=on; gp_enable_agg_distinct=on
 Optimizer status: PQO version 1.611
 Dispatcher statistics:
   executors used(total/cached/new connection): (8/8/0); dispatcher time(total/connection/dispatch data): (0.171 ms/0.000 ms/0.065 ms).
   dispatch data time(max/min/avg): (0.025 ms/0.005 ms/0.008 ms); consume executor data time(max/min/avg): (0.042 ms/0.010 ms/0.018 ms); free executor time(max/min/avg): (0.000 ms/0.000 ms/0.000 ms).
 Data locality statistics:
   data locality ratio: 1.000; virtual segment number: 8; different host number: 1; virtual segment number per host(avg/min/max): (8/8/8); segment size(avg/min/max): (352.000/288/544); segment size with penalty(avg/min/max): (0.000/0/0); continuity(avg/min/max): (1.000/1.000/1.000).
 Total runtime: 46.381 ms
(43 rows)

set enable_nestloop=off;
set enable_hashjoin=on;
-- Limit on Agg
select d, count(*) from smallt group by d limit 5; --ignore
     d      | count 
------------+-------
 01-05-2011 |     5
 01-13-2011 |     5
 01-08-2011 |     5
 01-16-2011 |     5
 01-06-2011 |     5
(5 rows)

explain analyze select d, count(*) from smallt group by d limit 5;
                                                                                                                                         QUERY PLAN                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=0.00..431.00 rows=1 width=12)
   Rows out:  5 rows with 32 ms to end, start offset by 0.594/0.594 ms.
   ->  Gather Motion 8:1  (slice2; segments: 8)  (cost=0.00..431.00 rows=5 width=12)
         Rows out:  5 rows at destination with 32 ms to end, start offset by 0.595/0.595 ms.
         ->  Limit  (cost=0.00..431.00 rows=1 width=12)
               Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg4:xzhangmac) 3/2 rows with 25/28 ms to end, start offset by 7.166/4.647 ms.
               ->  GroupAggregate  (cost=0.00..431.00 rows=3 width=12)
                     Group By: d
                     Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg4:xzhangmac) 3/2 rows with 25/28 ms to end, start offset by 7.167/4.648 ms.
                     ->  Sort  (cost=0.00..431.00 rows=3 width=12)
                           Sort Key: d
                           Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg4:xzhangmac) 3/2 rows with 25/28 ms to end, start offset by 7.167/4.649 ms.
                           Executor memory:  61K bytes avg, 61K bytes max (seg0:xzhangmac).
                           Work_mem used:  61K bytes avg, 61K bytes max (seg0:xzhangmac). Workfile: (0 spilling, 0 reused)
                           ->  Redistribute Motion 8:8  (slice1; segments: 8)  (cost=0.00..431.00 rows=3 width=12)
                                 Hash Key: d
                                 Rows out:  Avg 2.5 rows x 8 workers at destination.  Max/Last(seg0:xzhangmac/seg4:xzhangmac) 3/2 rows with 16/20 ms to first row, 23/27 ms to end, start offset by 9.175/5.755 ms.
                                 ->  Result  (cost=0.00..431.00 rows=3 width=12)
                                       Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg0:xzhangmac) 4/2 rows with 18/21 ms to end, start offset by 14/11 ms.
                                       ->  GroupAggregate  (cost=0.00..431.00 rows=3 width=12)
                                             Group By: d
                                             Rows out:  Avg 2.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg0:xzhangmac) 4/2 rows with 18/21 ms to end, start offset by 14/11 ms.
                                             ->  Sort  (cost=0.00..431.00 rows=13 width=4)
                                                   Sort Key: d
                                                   Rows out:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg0:xzhangmac) 20/10 rows with 18/21 ms to end, start offset by 14/11 ms.
                                                   Executor memory:  61K bytes avg, 61K bytes max (seg0:xzhangmac).
                                                   Work_mem used:  61K bytes avg, 61K bytes max (seg0:xzhangmac). Workfile: (0 spilling, 0 reused)
                                                   ->  Table Scan on smallt  (cost=0.00..431.00 rows=13 width=4)
                                                         Rows out:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg1:xzhangmac) 20/10 rows with 17/19 ms to end, start offset by 15/6.208 ms.
 Slice statistics:
   (slice0)    Executor memory: 223K bytes.
   (slice1)    Executor memory: 431K bytes avg x 8 workers, 443K bytes max (seg2:xzhangmac).  Work_mem: 61K bytes max.
   (slice2)    Executor memory: 275K bytes avg x 8 workers, 275K bytes max (seg0:xzhangmac).  Work_mem: 61K bytes max.
 Statement statistics:
   Memory used: 131072K bytes
 Settings:  default_segment_num=8; enable_hashjoin=on; enable_nestloop=off; gp_enable_agg_distinct=on
 Optimizer status: PQO version 1.611
 Dispatcher statistics:
   executors used(total/cached/new connection): (16/16/0); dispatcher time(total/connection/dispatch data): (0.269 ms/0.000 ms/0.136 ms).
   dispatch data time(max/min/avg): (0.030 ms/0.004 ms/0.008 ms); consume executor data time(max/min/avg): (0.023 ms/0.004 ms/0.011 ms); free executor time(max/min/avg): (0.000 ms/0.000 ms/0.000 ms).
 Data locality statistics:
   data locality ratio: 1.000; virtual segment number: 8; different host number: 1; virtual segment number per host(avg/min/max): (8/8/8); segment size(avg/min/max): (352.000/288/544); segment size with penalty(avg/min/max): (0.000/0/0); continuity(avg/min/max): (1.000/1.000/1.000).
 Total runtime: 33.648 ms
(43 rows)

-- HashJoin
select t1.* from smallt as t1, smallt as t2 where t1.i = t2.i;
 i |    t    |     d      
---+---------+------------
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 13 | 01-14-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 3 | text 3  | 01-14-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 14 | 01-05-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 9  | 01-15-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 4  | 01-05-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 14 | 01-15-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 9  | 01-05-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 4 | text 4  | 01-15-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 1  | 01-07-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 11 | 01-17-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 6  | 01-07-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 1  | 01-17-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 11 | 01-07-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 6 | text 6  | 01-17-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 2  | 01-08-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 12 | 01-18-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 7  | 01-08-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 2  | 01-18-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 12 | 01-08-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 7 | text 7  | 01-18-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 2  | 01-03-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 12 | 01-13-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 7  | 01-03-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 2 | text 2  | 01-13-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 8 | text 3  | 01-09-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 8 | text 13 | 01-19-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 8 | text 8  | 01-09-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 8 | text 3  | 01-19-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 8 | text 13 | 01-09-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 8 | text 8  | 01-19-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 9 | text 4  | 01-10-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 9 | text 14 | 01-20-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 9 | text 9  | 01-10-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 9 | text 4  | 01-20-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 9 | text 14 | 01-10-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 9 | text 9  | 01-20-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 0  | 01-06-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 10 | 01-16-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 5  | 01-06-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 0  | 01-16-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 10 | 01-06-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
 5 | text 5  | 01-16-2011
(1000 rows)

explain analyze select t1.* from smallt as t1, smallt as t2 where t1.i = t2.i;
                                                                                                                                         QUERY PLAN                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 8:1  (slice1; segments: 8)  (cost=0.00..862.05 rows=1000 width=15)
   Rows out:  1000 rows at destination with 44 ms to first row, 60 ms to end, start offset by 0.549/0.549 ms.
   ->  Hash Join  (cost=0.00..862.01 rows=125 width=15)
         Hash Cond: public.smallt.i = public.smallt.i
         Rows out:  Avg 125.0 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg2:xzhangmac) 200/200 rows with 52/52 ms to first row, 57/57 ms to end, start offset by 3.244/3.244 ms.
         Executor memory:  1K bytes avg, 1K bytes max (seg2:xzhangmac).
         Work_mem used:  1K bytes avg, 1K bytes max (seg2:xzhangmac). Workfile: (0 spilling, 0 reused)
         (seg2)   Hash chain length 10.0 avg, 10 max, using 2 of 1048589 buckets.
         ->  Table Scan on smallt  (cost=0.00..431.00 rows=13 width=15)
               Rows out:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg5:xzhangmac) 20/20 rows with 8.002/14 ms to first row, 8.065/14 ms to end, start offset by 47/39 ms.
         ->  Hash  (cost=431.00..431.00 rows=13 width=4)
               Rows in:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg2:xzhangmac) 20/20 rows with 34/34 ms to end, start offset by 13/13 ms.
               ->  Table Scan on smallt  (cost=0.00..431.00 rows=13 width=4)
                     Rows out:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg2:xzhangmac) 20/20 rows with 34/34 ms to end, start offset by 13/13 ms.
 Slice statistics:
   (slice0)    Executor memory: 243K bytes.
   (slice1)    Executor memory: 12583K bytes avg x 8 workers, 12583K bytes max (seg0:xzhangmac).  Work_mem: 1K bytes max.
 Statement statistics:
   Memory used: 131072K bytes
 Settings:  default_segment_num=8; enable_hashjoin=on; enable_nestloop=off; gp_enable_agg_distinct=on
 Optimizer status: PQO version 1.611
 Dispatcher statistics:
   executors used(total/cached/new connection): (8/8/0); dispatcher time(total/connection/dispatch data): (0.172 ms/0.000 ms/0.069 ms).
   dispatch data time(max/min/avg): (0.026 ms/0.004 ms/0.008 ms); consume executor data time(max/min/avg): (0.027 ms/0.007 ms/0.014 ms); free executor time(max/min/avg): (0.000 ms/0.000 ms/0.000 ms).
 Data locality statistics:
   data locality ratio: 1.000; virtual segment number: 8; different host number: 1; virtual segment number per host(avg/min/max): (8/8/8); segment size(avg/min/max): (352.000/288/544); segment size with penalty(avg/min/max): (0.000/0/0); continuity(avg/min/max): (1.000/1.000/1.000).
 Total runtime: 61.061 ms
(27 rows)

-- Rescan on HashJoin
--select t1.* from (select t11.* from smallt as t11, smallt as t22 where t11.i = t22.i and t11.i < 2) as t1,
--   (select t11.* from smallt as t11, smallt as t22 where t11.d = t22.d and t11.i < 5) as t2;
-- Material in SubPlan
select smallt2.* from smallt2
where i < (select count(*) from smallt where smallt.i = smallt2.i);
 i |   t    |     d      
---+--------+------------
 2 | text 2 | 01-03-2011
 2 | text 7 | 01-08-2011
 2 | text 2 | 01-13-2011
 2 | text 7 | 01-03-2011
 2 | text 2 | 01-08-2011
 2 | text 7 | 01-13-2011
 2 | text 2 | 01-03-2011
 2 | text 7 | 01-08-2011
 2 | text 2 | 01-13-2011
 2 | text 7 | 01-03-2011
 0 | text 0 | 01-01-2011
 0 | text 5 | 01-06-2011
 0 | text 0 | 01-11-2011
 0 | text 5 | 01-01-2011
 0 | text 0 | 01-06-2011
 0 | text 5 | 01-11-2011
 0 | text 0 | 01-01-2011
 0 | text 5 | 01-06-2011
 0 | text 0 | 01-11-2011
 0 | text 5 | 01-01-2011
 1 | text 1 | 01-02-2011
 1 | text 6 | 01-07-2011
 1 | text 1 | 01-12-2011
 1 | text 6 | 01-02-2011
 1 | text 1 | 01-07-2011
 1 | text 6 | 01-12-2011
 1 | text 1 | 01-02-2011
 1 | text 6 | 01-07-2011
 1 | text 1 | 01-12-2011
 1 | text 6 | 01-02-2011
 3 | text 3 | 01-04-2011
 3 | text 8 | 01-09-2011
 3 | text 3 | 01-14-2011
 3 | text 8 | 01-04-2011
 3 | text 3 | 01-09-2011
 3 | text 8 | 01-14-2011
 3 | text 3 | 01-04-2011
 3 | text 8 | 01-09-2011
 3 | text 3 | 01-14-2011
 3 | text 8 | 01-04-2011
 4 | text 4 | 01-05-2011
 4 | text 9 | 01-10-2011
 4 | text 4 | 01-15-2011
 4 | text 9 | 01-05-2011
 4 | text 4 | 01-10-2011
 4 | text 9 | 01-15-2011
 4 | text 4 | 01-05-2011
 4 | text 9 | 01-10-2011
 4 | text 4 | 01-15-2011
 4 | text 9 | 01-05-2011
(50 rows)

explain select smallt2.* from smallt2
where i < (select count(*) from smallt where smallt.i = smallt2.i);
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Gather Motion 8:1  (slice1; segments: 8)  (cost=0.00..862.01 rows=50 width=15)
   ->  Result  (cost=0.00..862.01 rows=7 width=15)
         Filter: smallt2.i < COALESCE("ColRef_0013", 0::bigint)
         ->  Result  (cost=0.00..862.01 rows=7 width=24)
               ->  Hash Left Join  (cost=0.00..862.00 rows=7 width=23)
                     Hash Cond: smallt2.i = smallt.i
                     ->  Table Scan on smallt2  (cost=0.00..431.00 rows=7 width=15)
                     ->  Hash  (cost=431.00..431.00 rows=2 width=12)
                           ->  GroupAggregate  (cost=0.00..431.00 rows=2 width=12)
                                 Group By: smallt.i
                                 ->  Sort  (cost=0.00..431.00 rows=13 width=4)
                                       Sort Key: smallt.i
                                       ->  Table Scan on smallt  (cost=0.00..431.00 rows=13 width=4)
 Settings:  default_segment_num=8; enable_hashjoin=on; enable_nestloop=off; gp_enable_agg_distinct=on
 Optimizer status: PQO version 1.611
(15 rows)

-- Append + Material in SubPlan
drop table if exists smallt_part;
NOTICE:  table "smallt_part" does not exist, skipping
drop table if exists smallt2_part;
NOTICE:  table "smallt2_part" does not exist, skipping
create table smallt_part (i int, t text, d date)
partition by range (d) (start ('2011-01-01'::date) end ('2011-01-21'::date) every ('5 days'::interval));
NOTICE:  CREATE TABLE will create partition "smallt_part_1_prt_1" for table "smallt_part"
NOTICE:  CREATE TABLE will create partition "smallt_part_1_prt_2" for table "smallt_part"
NOTICE:  CREATE TABLE will create partition "smallt_part_1_prt_3" for table "smallt_part"
NOTICE:  CREATE TABLE will create partition "smallt_part_1_prt_4" for table "smallt_part"
create table smallt2_part (i int, t text, d date)
partition by range (d) (start ('2011-01-01'::date) end ('2011-01-16'::date) every ('4 days'::interval));
NOTICE:  CREATE TABLE will create partition "smallt2_part_1_prt_1" for table "smallt2_part"
NOTICE:  CREATE TABLE will create partition "smallt2_part_1_prt_2" for table "smallt2_part"
NOTICE:  CREATE TABLE will create partition "smallt2_part_1_prt_3" for table "smallt2_part"
NOTICE:  CREATE TABLE will create partition "smallt2_part_1_prt_4" for table "smallt2_part"
insert into smallt_part select i%10, 'text ' || (i%15), '2011-01-01'::date + ((i%20) || ' days')::interval
from generate_series(0, 99) i;
insert into smallt2_part select i%5, 'text ' || (i%10), '2011-01-01'::date + ((i%15) || ' days')::interval
from generate_series(0, 49) i;
select * from smallt_part where i < any (select count(*) from smallt2_part where smallt_part.i = smallt2_part.i group by d);
 i |    t    |     d      
---+---------+------------
 2 | text 7  | 01-03-2011
 2 | text 2  | 01-03-2011
 1 | text 6  | 01-02-2011
 1 | text 1  | 01-02-2011
 0 | text 0  | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 5  | 01-01-2011
 3 | text 8  | 01-04-2011
 3 | text 3  | 01-04-2011
 2 | text 2  | 01-03-2011
 2 | text 12 | 01-03-2011
 2 | text 7  | 01-03-2011
 1 | text 1  | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 6  | 01-02-2011
 0 | text 5  | 01-01-2011
 0 | text 0  | 01-01-2011
 3 | text 3  | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 8  | 01-04-2011
 0 | text 0  | 01-11-2011
 0 | text 10 | 01-11-2011
 3 | text 13 | 01-14-2011
 3 | text 8  | 01-14-2011
 3 | text 3  | 01-14-2011
 2 | text 2  | 01-13-2011
 2 | text 12 | 01-13-2011
 1 | text 1  | 01-12-2011
 1 | text 11 | 01-12-2011
 0 | text 10 | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 0  | 01-11-2011
 3 | text 3  | 01-14-2011
 3 | text 13 | 01-14-2011
 2 | text 12 | 01-13-2011
 2 | text 7  | 01-13-2011
 2 | text 2  | 01-13-2011
 1 | text 11 | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 1  | 01-12-2011
(40 rows)

explain analyze select * from smallt_part where i < any (select count(*) from smallt2_part where smallt_part.i = smallt2_part.i group by d);
                                                                                                                                               QUERY PLAN                                                                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Hash EXISTS Join  (cost=0.00..862.00 rows=1 width=16)
   Hash Cond: smallt_part.i = smallt2_part.i
   Join Filter: smallt_part.i < "inner".count
   Rows out:  40 rows with 210 ms to first row, 211 ms to end, start offset by 2.261/2.261 ms.
   Executor memory:  1K bytes.
   Work_mem used:  1K bytes. Workfile: (0 spilling, 0 reused)
   Hash chain length 3.0 avg, 3 max, using 5 of 262151 buckets.
   ->  Gather Motion 1:1  (slice1; segments: 1)  (cost=0.00..431.00 rows=1 width=16)
         Rows out:  100 rows at destination with 18 ms to end, start offset by 195/195 ms.
         ->  Sequence  (cost=0.00..431.00 rows=1 width=16)
               Rows out:  100 rows with 5.890 ms to first row, 208 ms to end, start offset by 4.733/4.733 ms.
               ->  Partition Selector for smallt_part (dynamic scan id: 1)  (cost=10.00..100.00 rows=100 width=4)
                     Partitions selected:  4 (out of 4)
                     Rows out:  0 rows with 0.195 ms to end.
               ->  Dynamic Table Scan on smallt_part (dynamic scan id: 1)  (cost=0.00..431.00 rows=1 width=16)
                     Rows out:  100 rows with 5.694 ms to first row, 207 ms to end, start offset by 4.928/4.928 ms.
                     Partitions scanned:  4 (out of 4) .
   ->  Hash  (cost=431.00..431.00 rows=1 width=12)
         Rows in:  15 rows with 192 ms to end, start offset by 2.670/2.670 ms.
         ->  Gather Motion 1:1  (slice3; segments: 1)  (cost=0.00..431.00 rows=1 width=12)
               Rows out:  15 rows at destination with 192 ms to end, start offset by 2.671/2.671 ms.
               ->  Result  (cost=0.00..431.00 rows=1 width=12)
                     Rows out:  15 rows with 190 ms to end, start offset by 4.780/4.780 ms.
                     ->  GroupAggregate  (cost=0.00..431.00 rows=1 width=12)
                           Group By: smallt2_part.i, smallt2_part.d
                           Rows out:  15 rows with 190 ms to end, start offset by 4.781/4.781 ms.
                           ->  Sort  (cost=0.00..431.00 rows=1 width=16)
                                 Sort Key: smallt2_part.i, smallt2_part.d
                                 Rows out:  15 rows with 190 ms to end, start offset by 4.781/4.781 ms.
                                 Executor memory:  77K bytes.
                                 Work_mem used:  77K bytes. Workfile: (0 spilling, 0 reused)
                                 ->  Redistribute Motion 1:1  (slice2; segments: 1)  (cost=0.00..431.00 rows=1 width=16)
                                       Hash Key: smallt2_part.i, smallt2_part.d
                                       Rows out:  15 rows at destination with 189 ms to end, start offset by 5.329/5.329 ms.
                                       ->  Result  (cost=0.00..431.00 rows=1 width=16)
                                             Rows out:  15 rows with 189 ms to first row, 190 ms to end, start offset by 4.790/4.790 ms.
                                             ->  GroupAggregate  (cost=0.00..431.00 rows=1 width=16)
                                                   Group By: smallt2_part.i, smallt2_part.d
                                                   Rows out:  15 rows with 189 ms to first row, 190 ms to end, start offset by 4.790/4.790 ms.
                                                   ->  Sequence  (cost=0.00..431.00 rows=1 width=8)
                                                         Rows out:  50 rows with 189 ms to end, start offset by 4.790/4.790 ms.
                                                         ->  Partition Selector for smallt2_part (dynamic scan id: 2)  (cost=10.00..100.00 rows=100 width=4)
                                                               Partitions selected:  4 (out of 4)
                                                               Rows out:  0 rows with 0.014 ms to end.
                                                         ->  Sort  (cost=0.00..431.00 rows=1 width=8)
                                                               Sort Key: smallt2_part.i, smallt2_part.d
                                                               Rows out:  50 rows with 189 ms to end, start offset by 4.805/4.805 ms.
                                                               Executor memory:  77K bytes.
                                                               Work_mem used:  77K bytes. Workfile: (0 spilling, 0 reused)
                                                               ->  Dynamic Table Scan on smallt2_part (dynamic scan id: 2)  (cost=0.00..431.00 rows=1 width=8)
                                                                     Rows out:  50 rows with 5.856 ms to first row, 189 ms to end, start offset by 5.316/5.316 ms.
                                                                     Partitions scanned:  4 (out of 4) .
 Slice statistics:
   (slice0)    Executor memory: 3388K bytes.  Work_mem: 1K bytes max.
   (slice1)    Executor memory: 363K bytes (seg0:xzhangmac).
   (slice2)    Executor memory: 407K bytes (seg0:xzhangmac).  Work_mem: 77K bytes max.
   (slice3)    Executor memory: 295K bytes (seg0:xzhangmac).  Work_mem: 77K bytes max.
 Statement statistics:
   Memory used: 131072K bytes
 Settings:  default_segment_num=8; enable_hashjoin=on; enable_nestloop=off; gp_enable_agg_distinct=on
 Optimizer status: PQO version 1.611
 Dispatcher statistics:
   executors used(total/cached/new connection): (3/3/0); dispatcher time(total/connection/dispatch data): (0.154 ms/0.000 ms/0.053 ms).
   dispatch data time(max/min/avg): (0.033 ms/0.009 ms/0.017 ms); consume executor data time(max/min/avg): (0.014 ms/0.005 ms/0.011 ms); free executor time(max/min/avg): (0.000 ms/0.000 ms/0.000 ms).
 Data locality statistics:
   data locality ratio: 1.000; virtual segment number: 1; different host number: 1; virtual segment number per host(avg/min/max): (1/1/1); segment size(avg/min/max): (5344.000/5344/5344); segment size with penalty(avg/min/max): (5344.000/5344/5344); continuity(avg/min/max): (1.000/1.000/1.000).
 Total runtime: 213.673 ms
(67 rows)

-- Sort in MergeJoin
set enable_hashjoin=off;
set enable_mergejoin=on;
select t1.* from smallt as t1, smallt as t2 where t1.i = t2.i and t1.i < 2;
 i |    t    |     d      
---+---------+------------
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
(200 rows)

explain analyze select t1.* from smallt as t1, smallt as t2 where t1.i = t2.i and t1.i < 2;
                                                                                                                                         QUERY PLAN                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 8:1  (slice1; segments: 8)  (cost=0.00..862.01 rows=200 width=15)
   Rows out:  200 rows at destination with 31 ms to first row, 33 ms to end, start offset by 0.598/0.598 ms.
   ->  Hash Join  (cost=0.00..862.01 rows=25 width=15)
         Hash Cond: public.smallt.i = public.smallt.i
         Rows out:  Avg 100.0 rows x 2 workers.  Max/Last(seg2:xzhangmac/seg5:xzhangmac) 100/100 rows with 24/27 ms to first row, 28/30 ms to end, start offset by 3.684/3.056 ms.
         Executor memory:  1K bytes avg, 1K bytes max (seg2:xzhangmac).
         Work_mem used:  1K bytes avg, 1K bytes max (seg2:xzhangmac). Workfile: (0 spilling, 0 reused)
         (seg2)   Hash chain length 10.0 avg, 10 max, using 1 of 1048589 buckets.
         ->  Table Scan on smallt  (cost=0.00..431.00 rows=3 width=15)
               Filter: i < 2
               Rows out:  Avg 10.0 rows x 2 workers.  Max/Last(seg2:xzhangmac/seg2:xzhangmac) 10/10 rows with 7.608/7.608 ms to first row, 7.646/7.646 ms to end, start offset by 20/20 ms.
         ->  Hash  (cost=431.00..431.00 rows=3 width=4)
               Rows in:  Avg 10.0 rows x 2 workers.  Max/Last(seg2:xzhangmac/seg5:xzhangmac) 10/10 rows with 8.106/10 ms to end, start offset by 12/13 ms.
               ->  Table Scan on smallt  (cost=0.00..431.00 rows=3 width=4)
                     Filter: i < 2
                     Rows out:  Avg 10.0 rows x 2 workers.  Max/Last(seg2:xzhangmac/seg5:xzhangmac) 10/10 rows with 8.046/9.944 ms to first row, 8.094/9.993 ms to end, start offset by 12/13 ms.
 Slice statistics:
   (slice0)    Executor memory: 243K bytes.
   (slice1)    Executor memory: 12583K bytes avg x 8 workers, 12583K bytes max (seg0:xzhangmac).  Work_mem: 1K bytes max.
 Statement statistics:
   Memory used: 131072K bytes
 Settings:  default_segment_num=8; enable_hashjoin=off; enable_mergejoin=on; enable_nestloop=off; gp_enable_agg_distinct=on
 Optimizer status: PQO version 1.611
 Dispatcher statistics:
   executors used(total/cached/new connection): (8/8/0); dispatcher time(total/connection/dispatch data): (0.199 ms/0.000 ms/0.077 ms).
   dispatch data time(max/min/avg): (0.028 ms/0.006 ms/0.010 ms); consume executor data time(max/min/avg): (0.020 ms/0.006 ms/0.012 ms); free executor time(max/min/avg): (0.000 ms/0.000 ms/0.000 ms).
 Data locality statistics:
   data locality ratio: 1.000; virtual segment number: 8; different host number: 1; virtual segment number per host(avg/min/max): (8/8/8); segment size(avg/min/max): (352.000/288/544); segment size with penalty(avg/min/max): (0.000/0/0); continuity(avg/min/max): (1.000/1.000/1.000).
 Total runtime: 33.997 ms
(29 rows)

select t1.* from smallt as t1, smallt as t2 where t1.d = t2.d and t1.i < 2;
 i |    t    |     d      
---+---------+------------
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 10 | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 0  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 5  | 01-01-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 5  | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 10 | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 0 | text 0  | 01-11-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 11 | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 1  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 6  | 01-02-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 6  | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 11 | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
 1 | text 1  | 01-12-2011
(100 rows)

--start_ignore
explain analyze select t1.* from smallt as t1, smallt as t2 where t1.d = t2.d and t1.i < 2;
                                                                                                                                         QUERY PLAN                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 8:1  (slice3; segments: 8)  (cost=0.00..862.01 rows=100 width=15)
   Rows out:  100 rows at destination with 59 ms to first row, 67 ms to end, start offset by 0.649/0.649 ms.
   ->  Hash Join  (cost=0.00..862.00 rows=13 width=15)
         Hash Cond: public.smallt.d = public.smallt.d
         Rows out:  Avg 25.0 rows x 4 workers.  Max/Last(seg0:xzhangmac/seg6:xzhangmac) 25/25 rows with 49/59 ms to first row, 54/64 ms to end, start offset by 5.155/3.063 ms.
         Executor memory:  1K bytes avg, 1K bytes max (seg0:xzhangmac).
         Work_mem used:  1K bytes avg, 1K bytes max (seg0:xzhangmac). Workfile: (0 spilling, 0 reused)
         (seg0)   Hash chain length 5.0 avg, 5 max, using 3 of 1048589 buckets.
         ->  Redistribute Motion 8:8  (slice1; segments: 8)  (cost=0.00..431.00 rows=3 width=15)
               Hash Key: public.smallt.d
               Rows out:  Avg 5.0 rows x 4 workers at destination.  Max/Last(seg0:xzhangmac/seg3:xzhangmac) 5/5 rows with 0.018/0.217 ms to first row, 0.023/0.835 ms to end, start offset by 54/55 ms.
               ->  Table Scan on smallt  (cost=0.00..431.00 rows=3 width=15)
                     Filter: i < 2
                     Rows out:  Avg 10.0 rows x 2 workers.  Max/Last(seg2:xzhangmac/seg7:xzhangmac) 10/0 rows with 35/43 ms to end, start offset by 3.608/4.336 ms.
         ->  Hash  (cost=431.00..431.00 rows=13 width=4)
               Rows in:  Avg 12.5 rows x 8 workers.  Max/Last(seg0:xzhangmac/seg6:xzhangmac) 15/15 rows with 38/48 ms to end, start offset by 16/14 ms.
               ->  Redistribute Motion 8:8  (slice2; segments: 8)  (cost=0.00..431.00 rows=13 width=4)
                     Hash Key: public.smallt.d
                     Rows out:  Avg 12.5 rows x 8 workers at destination.  Max/Last(seg0:xzhangmac/seg6:xzhangmac) 15/15 rows with 30/32 ms to first row, 38/48 ms to end, start offset by 16/14 ms.
                     ->  Table Scan on smallt  (cost=0.00..431.00 rows=13 width=4)
                           Rows out:  Avg 12.5 rows x 8 workers.  Max/Last(seg2:xzhangmac/seg3:xzhangmac) 20/10 rows with 37/38 ms to end, start offset by 8.533/8.574 ms.
 Slice statistics:
   (slice0)    Executor memory: 227K bytes.
   (slice1)    Executor memory: 339K bytes avg x 8 workers, 339K bytes max (seg0:xzhangmac).
   (slice2)    Executor memory: 339K bytes avg x 8 workers, 339K bytes max (seg0:xzhangmac).
   (slice3)    Executor memory: 12539K bytes avg x 8 workers, 12539K bytes max (seg0:xzhangmac).  Work_mem: 1K bytes max.
 Statement statistics:
   Memory used: 131072K bytes
 Settings:  default_segment_num=8; enable_hashjoin=off; enable_mergejoin=on; enable_nestloop=off; gp_enable_agg_distinct=on
 Optimizer status: PQO version 1.611
 Dispatcher statistics:
   executors used(total/cached/new connection): (24/24/0); dispatcher time(total/connection/dispatch data): (0.353 ms/0.000 ms/0.195 ms).
   dispatch data time(max/min/avg): (0.021 ms/0.005 ms/0.008 ms); consume executor data time(max/min/avg): (0.018 ms/0.007 ms/0.013 ms); free executor time(max/min/avg): (0.000 ms/0.000 ms/0.000 ms).
 Data locality statistics:
   data locality ratio: 1.000; virtual segment number: 8; different host number: 1; virtual segment number per host(avg/min/max): (8/8/8); segment size(avg/min/max): (352.000/288/544); segment size with penalty(avg/min/max): (0.000/0/0); continuity(avg/min/max): (1.000/1.000/1.000).
 Total runtime: 68.085 ms
(36 rows)

--end_ignore
set enable_hashjoin=on;
set enable_mergejoin=off;
-- ShareInputScan
--with my_group_max(i, maximum) as (select i, max(d) from smallt group by i)
--select smallt2.* from my_group_max, smallt2 where my_group_max.i = smallt2.i
--and smallt2.i < any (select maximum from my_group_max);
--explain analyze with my_group_max(i, maximum) as (select i, max(d) from smallt group by i)
--select smallt2.* from my_group_max, smallt2 where my_group_max.i = smallt2.i
--and smallt2.i < any (select maximum from my_group_max);
-- IndexScan
create index smallt_d_idx on smallt (d);
ERROR:  Cannot support create index statement yet
create index smallt2_d_idx on smallt2 (d);
ERROR:  Cannot support create index statement yet
set enable_hashjoin=off;
set enable_nestloop=on;
set enable_seqscan=off;
set enable_bitmapscan=off;
select smallt.* from smallt, smallt2 where smallt.i = smallt2.i and smallt2.d = '2011-01-04'::date
and smallt.d = '2011-01-04'::date;
 i |    t    |     d      
---+---------+------------
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
(20 rows)

explain analyze select smallt.* from smallt, smallt2 where smallt.i = smallt2.i and smallt2.d = '2011-01-04'::date
and smallt.d = '2011-01-04'::date;
                                                                                                                                         QUERY PLAN                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 8:1  (slice1; segments: 8)  (cost=0.00..862.00 rows=2 width=15)
   Rows out:  20 rows at destination with 35 ms to end, start offset by 0.775/0.775 ms.
   ->  Hash Join  (cost=0.00..862.00 rows=1 width=15)
         Hash Cond: smallt.i = smallt2.i
         Rows out:  20 rows (seg4:xzhangmac) with 25 ms to first row, 29 ms to end, start offset by 6.397/6.397 ms.
         Executor memory:  1K bytes.
         Work_mem used:  1K bytes. Workfile: (0 spilling, 0 reused)
         (seg4)   Hash chain length 4.0 avg, 4 max, using 1 of 1048589 buckets.
         ->  Table Scan on smallt  (cost=0.00..431.00 rows=1 width=15)
               Filter: d = '01-04-2011'::date
               Rows out:  5 rows (seg4:xzhangmac) with 6.552 ms to first row, 6.582 ms to end, start offset by 25/25 ms.
         ->  Hash  (cost=431.00..431.00 rows=1 width=4)
               Rows in:  4 rows (seg4:xzhangmac) with 8.888 ms to end, start offset by 16/13 ms.
               ->  Table Scan on smallt2  (cost=0.00..431.00 rows=1 width=4)
                     Filter: d = '01-04-2011'::date
                     Rows out:  4 rows (seg4:xzhangmac) with 8.819 ms to first row, 8.879 ms to end, start offset by 16/13 ms.
 Slice statistics:
   (slice0)    Executor memory: 238K bytes.
   (slice1)    Executor memory: 12583K bytes avg x 8 workers, 12583K bytes max (seg0:xzhangmac).  Work_mem: 1K bytes max.
 Statement statistics:
   Memory used: 131072K bytes
 Settings:  default_segment_num=8; enable_bitmapscan=off; enable_hashjoin=off; enable_mergejoin=off; enable_nestloop=on; enable_seqscan=off; gp_enable_agg_distinct=on
 Optimizer status: PQO version 1.611
 Dispatcher statistics:
   executors used(total/cached/new connection): (8/8/0); dispatcher time(total/connection/dispatch data): (0.212 ms/0.000 ms/0.112 ms).
   dispatch data time(max/min/avg): (0.031 ms/0.005 ms/0.013 ms); consume executor data time(max/min/avg): (0.016 ms/0.009 ms/0.013 ms); free executor time(max/min/avg): (0.000 ms/0.000 ms/0.000 ms).
 Data locality statistics:
   data locality ratio: 1.000; virtual segment number: 8; different host number: 1; virtual segment number per host(avg/min/max): (8/8/8); segment size(avg/min/max): (532.000/288/832); segment size with penalty(avg/min/max): (0.000/0/0); continuity(avg/min/max): (1.000/1.000/1.000).
 Total runtime: 35.908 ms
(29 rows)

-- BitmapScan
set enable_indexscan=off;
set enable_bitmapscan=on;
select smallt.* from smallt, smallt2 where smallt.i = smallt2.i and smallt2.d = '2011-01-04'::date
and smallt.d = '2011-01-04'::date;
 i |    t    |     d      
---+---------+------------
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 13 | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 3  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
 3 | text 8  | 01-04-2011
(20 rows)

explain analyze select smallt.* from smallt, smallt2 where smallt.i = smallt2.i and smallt2.d = '2011-01-04'::date
and smallt.d = '2011-01-04'::date;
                                                                                                                                         QUERY PLAN                                                                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Gather Motion 8:1  (slice1; segments: 8)  (cost=0.00..862.00 rows=2 width=15)
   Rows out:  20 rows at destination with 30 ms to end, start offset by 0.663/0.663 ms.
   ->  Hash Join  (cost=0.00..862.00 rows=1 width=15)
         Hash Cond: smallt.i = smallt2.i
         Rows out:  20 rows (seg4:xzhangmac) with 24 ms to first row, 28 ms to end, start offset by 2.865/2.865 ms.
         Executor memory:  1K bytes.
         Work_mem used:  1K bytes. Workfile: (0 spilling, 0 reused)
         (seg4)   Hash chain length 4.0 avg, 4 max, using 1 of 1048589 buckets.
         ->  Table Scan on smallt  (cost=0.00..431.00 rows=1 width=15)
               Filter: d = '01-04-2011'::date
               Rows out:  5 rows (seg4:xzhangmac) with 7.099 ms to first row, 7.129 ms to end, start offset by 20/20 ms.
         ->  Hash  (cost=431.00..431.00 rows=1 width=4)
               Rows in:  4 rows (seg4:xzhangmac) with 7.930 ms to end, start offset by 12/14 ms.
               ->  Table Scan on smallt2  (cost=0.00..431.00 rows=1 width=4)
                     Filter: d = '01-04-2011'::date
                     Rows out:  4 rows (seg4:xzhangmac) with 7.876 ms to first row, 7.920 ms to end, start offset by 12/14 ms.
 Slice statistics:
   (slice0)    Executor memory: 238K bytes.
   (slice1)    Executor memory: 12583K bytes avg x 8 workers, 12583K bytes max (seg0:xzhangmac).  Work_mem: 1K bytes max.
 Statement statistics:
   Memory used: 131072K bytes
 Settings:  default_segment_num=8; enable_bitmapscan=on; enable_hashjoin=off; enable_indexscan=off; enable_mergejoin=off; enable_nestloop=on; enable_seqscan=off; gp_enable_agg_distinct=on
 Optimizer status: PQO version 1.611
 Dispatcher statistics:
   executors used(total/cached/new connection): (8/8/0); dispatcher time(total/connection/dispatch data): (0.175 ms/0.000 ms/0.066 ms).
   dispatch data time(max/min/avg): (0.024 ms/0.004 ms/0.008 ms); consume executor data time(max/min/avg): (0.017 ms/0.009 ms/0.014 ms); free executor time(max/min/avg): (0.000 ms/0.000 ms/0.000 ms).
 Data locality statistics:
   data locality ratio: 1.000; virtual segment number: 8; different host number: 1; virtual segment number per host(avg/min/max): (8/8/8); segment size(avg/min/max): (532.000/288/832); segment size with penalty(avg/min/max): (0.000/0/0); continuity(avg/min/max): (1.000/1.000/1.000).
 Total runtime: 31.090 ms
(29 rows)

set enable_hashjoin=on;
set enable_nestloop=off;
set enable_seqscan=on;
set enable_indexscan=on;
-- SubPlan
with my_group_sum(d, total) as (select d, sum(i) from smallt group by d)
select smallt2.* from smallt2
where i < all (select total from my_group_sum, smallt, smallt2 as tmp where my_group_sum.d = smallt.d and smallt.d = tmp.d and my_group_sum.d = smallt2.d)
and i = 0 order by 1,2,3; --order 1,2,3
 i |   t    |     d      
---+--------+------------
 0 | text 0 | 01-06-2011
 0 | text 5 | 01-06-2011
 0 | text 5 | 01-06-2011
(3 rows)

select smallt2.* from smallt2
where i < all (select total from (select d, sum(i) as total from smallt group by d) as my_group_sum, smallt, smallt2 as tmp
    where my_group_sum.d = smallt.d and smallt.d = tmp.d and my_group_sum.d = smallt2.d)
and i = 0 order by 1,2,3; --order 1,2,3
 i |   t    |     d      
---+--------+------------
 0 | text 0 | 01-06-2011
 0 | text 5 | 01-06-2011
 0 | text 5 | 01-06-2011
(3 rows)

-- Nested Subplan
drop table if exists r;
NOTICE:  table "r" does not exist, skipping
drop table if exists s;
NOTICE:  table "s" does not exist, skipping
drop table if exists t;
NOTICE:  table "t" does not exist, skipping
create table r (r1 int, r2 int, r3 int);
create table s (s1 int, s2 int, s3 int);
create table t (t1 int, t2 int, t3 int);
insert into r select generate_series(1, 20), generate_series(1, 5), generate_series(1, 8);
insert into s select generate_series(1, 20), generate_series(6, 10), generate_series(1, 4);
insert into t select generate_series(1, 30), generate_series(1, 6), generate_series(1, 5);
select * from t where t1 > (select min(r1) from r where r2<t2 and r3 > (Select min(s3) from s where s1<r1));
 t1 | t2 | t3 
----+----+----
  6 |  6 |  1
 14 |  2 |  4
 27 |  3 |  2
  3 |  3 |  3
 11 |  5 |  1
 22 |  4 |  2
 30 |  6 |  5
  8 |  2 |  3
 16 |  4 |  1
 21 |  3 |  1
 29 |  5 |  4
  5 |  5 |  5
 24 |  6 |  4
 10 |  4 |  5
 23 |  5 |  3
 15 |  3 |  5
 18 |  6 |  3
 26 |  2 |  1
  4 |  4 |  4
 12 |  6 |  2
 17 |  5 |  2
  9 |  3 |  4
 20 |  2 |  5
 28 |  4 |  3
(24 rows)

