CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

AUTO_SOURCES(unit_SOURCES "*.cpp" "RECURSE" ${CMAKE_CURRENT_SOURCE_DIR})

ADD_DEFINITIONS(-DMOCK)

PROTOBUF_GENERATE_CPP(libhdfs3_PROTO_SOURCES libhdfs3_PROTO_HEADERS ${libhdfs3_PROTO_FILES})

SET(libhdfs3_SOURCES ${libhdfs3_SOURCES} ${libhdfs3_MOCK_SOURCES})

ADD_EXECUTABLE(unit EXCLUDE_FROM_ALL
    ${gtest_SOURCES}
    ${gmock_SOURCES}
    ${libhdfs3_SOURCES} 
    ${libhdfs3_PROTO_SOURCES} 
    ${libhdfs3_PROTO_HEADERS}
    ${unit_SOURCES}
)

TARGET_INCLUDE_DIRECTORIES(unit PRIVATE ${libhdfs3_ROOT_SOURCES_DIR})
TARGET_INCLUDE_DIRECTORIES(unit PRIVATE ${libhdfs3_COMMON_SOURCES_DIR})
TARGET_INCLUDE_DIRECTORIES(unit PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
TARGET_INCLUDE_DIRECTORIES(unit PRIVATE ${libhdfs3_PLATFORM_HEADER_DIR})
TARGET_INCLUDE_DIRECTORIES(unit PRIVATE ${CMAKE_SOURCE_DIR}/mock)

TARGET_LINK_LIBRARIES(unit pthread)

TARGET_LINK_LIBRARIES(unit Boost::boost)
IF(NEED_BOOST)
    TARGET_LINK_LIBRARIES(unit Boost::thread)
    TARGET_LINK_LIBRARIES(unit Boost::chrono)
    TARGET_LINK_LIBRARIES(unit Boost::system)
    TARGET_LINK_LIBRARIES(unit Boost::atomic)
    TARGET_LINK_LIBRARIES(unit Boost::iostreams)
ENDIF(NEED_BOOST)

IF(NEED_GCCEH)
	TARGET_LINK_LIBRARIES(unit gcc_eh)
ENDIF(NEED_GCCEH)

IF(OS_LINUX)
	TARGET_LINK_LIBRARIES(unit LibUUID::LibUUID)
ENDIF(OS_LINUX)

TARGET_LINK_LIBRARIES(unit protobuf::libprotobuf)
TARGET_LINK_LIBRARIES(unit LibXml2::LibXml2)
TARGET_LINK_LIBRARIES(unit KERBEROS::KERBEROS)
TARGET_LINK_LIBRARIES(unit GSASL::GSASL)
TARGET_LINK_LIBRARIES(unit GoogleTest::GoogleTest)
TARGET_LINK_LIBRARIES(unit SSL::SSL)
TARGET_LINK_LIBRARIES(unit Curl::Curl)

SET(unit_SOURCES ${unit_SOURCES} PARENT_SCOPE)

