CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

AUTO_SOURCES(function_SOURCES "*.cpp" "RECURSE" "${CMAKE_CURRENT_SOURCE_DIR}")

PROTOBUF_GENERATE_CPP(libhdfs3_PROTO_SOURCES libhdfs3_PROTO_HEADERS ${libhdfs3_PROTO_FILES})

IF(ENABLE_DEBUG STREQUAL ON)
    SET(libhdfs3_SOURCES ${libhdfs3_SOURCES} ${libhdfs3_MOCK_SOURCES})
ENDIF(ENABLE_DEBUG STREQUAL ON)

IF(NOT HDFS_SUPERUSER)
    SET(HDFS_SUPERUSER $ENV{USER})
ENDIF(NOT HDFS_SUPERUSER)

ADD_DEFINITIONS(-DHDFS_SUPERUSER="${HDFS_SUPERUSER}")
ADD_DEFINITIONS(-DUSER="$ENV{USER}")

ADD_EXECUTABLE(function EXCLUDE_FROM_ALL
    ${gtest_SOURCES}
    ${gmock_SOURCES}
    ${libhdfs3_SOURCES} 
    ${libhdfs3_PROTO_SOURCES} 
    ${libhdfs3_PROTO_HEADERS}
    ${function_SOURCES}
)

TARGET_INCLUDE_DIRECTORIES(function PRIVATE ${libhdfs3_ROOT_SOURCES_DIR})
TARGET_INCLUDE_DIRECTORIES(function PRIVATE ${libhdfs3_COMMON_SOURCES_DIR})
TARGET_INCLUDE_DIRECTORIES(function PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
TARGET_INCLUDE_DIRECTORIES(function PRIVATE ${libhdfs3_PLATFORM_HEADER_DIR})
TARGET_INCLUDE_DIRECTORIES(function PRIVATE ${CMAKE_SOURCE_DIR}/mock)

TARGET_LINK_LIBRARIES(function pthread)

TARGET_LINK_LIBRARIES(function Boost::boost)
IF(NEED_BOOST)
    TARGET_LINK_LIBRARIES(function Boost::thread)
    TARGET_LINK_LIBRARIES(function Boost::chrono)
    TARGET_LINK_LIBRARIES(function Boost::system)
    TARGET_LINK_LIBRARIES(function Boost::atomic)
    TARGET_LINK_LIBRARIES(function Boost::iostreams)
ENDIF(NEED_BOOST)

IF(NEED_GCCEH)
    TARGET_LINK_LIBRARIES(function gcc_eh)
ENDIF(NEED_GCCEH)

IF(OS_LINUX)
	TARGET_LINK_LIBRARIES(function LibUUID::LibUUID)
ENDIF(OS_LINUX)

TARGET_LINK_LIBRARIES(function protobuf::libprotobuf)
TARGET_LINK_LIBRARIES(function LibXml2::LibXml2)
TARGET_LINK_LIBRARIES(function KERBEROS::KERBEROS)
TARGET_LINK_LIBRARIES(function GSASL::GSASL)
TARGET_LINK_LIBRARIES(function GoogleTest::GoogleTest)
TARGET_LINK_LIBRARIES(function SSL::SSL)
TARGET_LINK_LIBRARIES(function Curl::Curl)

SET(function_SOURCES ${function_SOURCES} PARENT_SCOPE)

